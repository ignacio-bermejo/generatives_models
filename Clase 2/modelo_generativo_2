{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "vae_09072021.ipynb",
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    },
    "accelerator": "GPU"
  },
  "cells": [
    {
      "cell_type": "code",
      "metadata": {
        "id": "L9HU6SA6FLWA"
      },
      "source": [
        "from keras.datasets import fashion_mnist\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt"
      ],
      "execution_count": 2,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "LhjLy4tTFzuB"
      },
      "source": [
        "(x_train, y_train), (x_test, y_test) = fashion_mnist.load_data()"
      ],
      "execution_count": 59,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "11A0P2N7F2_n",
        "outputId": "f693ef43-82d7-41af-f39e-83bf1fef78eb"
      },
      "source": [
        "x_train.shape"
      ],
      "execution_count": 60,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(60000, 28, 28)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 60
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "id": "RvAriIrfF6Dz",
        "outputId": "9d26a1f2-9ad1-49a9-d695-610fe650473b"
      },
      "source": [
        "plt.set_cmap(\"gray\")"
      ],
      "execution_count": 61,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 0 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 282
        },
        "id": "BVteE-BOF7m1",
        "outputId": "8108a23a-9aab-4977-a899-a57eab68e497"
      },
      "source": [
        "plt.imshow(x_train[4])"
      ],
      "execution_count": 62,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.image.AxesImage at 0x7f7cb2172d90>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 62
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "N_yd8-ZIGP_G",
        "outputId": "5ae887f7-23e5-402a-d7b9-252b55e5f468"
      },
      "source": [
        "x_train[0]"
      ],
      "execution_count": 63,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n",
              "          0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n",
              "          0,   0],\n",
              "       [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n",
              "          0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n",
              "          0,   0],\n",
              "       [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n",
              "          0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n",
              "          0,   0],\n",
              "       [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   1,\n",
              "          0,   0,  13,  73,   0,   0,   1,   4,   0,   0,   0,   0,   1,\n",
              "          1,   0],\n",
              "       [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   3,\n",
              "          0,  36, 136, 127,  62,  54,   0,   0,   0,   1,   3,   4,   0,\n",
              "          0,   3],\n",
              "       [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   6,\n",
              "          0, 102, 204, 176, 134, 144, 123,  23,   0,   0,   0,   0,  12,\n",
              "         10,   0],\n",
              "       [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n",
              "          0, 155, 236, 207, 178, 107, 156, 161, 109,  64,  23,  77, 130,\n",
              "         72,  15],\n",
              "       [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   1,   0,\n",
              "         69, 207, 223, 218, 216, 216, 163, 127, 121, 122, 146, 141,  88,\n",
              "        172,  66],\n",
              "       [  0,   0,   0,   0,   0,   0,   0,   0,   0,   1,   1,   1,   0,\n",
              "        200, 232, 232, 233, 229, 223, 223, 215, 213, 164, 127, 123, 196,\n",
              "        229,   0],\n",
              "       [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n",
              "        183, 225, 216, 223, 228, 235, 227, 224, 222, 224, 221, 223, 245,\n",
              "        173,   0],\n",
              "       [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n",
              "        193, 228, 218, 213, 198, 180, 212, 210, 211, 213, 223, 220, 243,\n",
              "        202,   0],\n",
              "       [  0,   0,   0,   0,   0,   0,   0,   0,   0,   1,   3,   0,  12,\n",
              "        219, 220, 212, 218, 192, 169, 227, 208, 218, 224, 212, 226, 197,\n",
              "        209,  52],\n",
              "       [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   6,   0,  99,\n",
              "        244, 222, 220, 218, 203, 198, 221, 215, 213, 222, 220, 245, 119,\n",
              "        167,  56],\n",
              "       [  0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,   0,  55,\n",
              "        236, 228, 230, 228, 240, 232, 213, 218, 223, 234, 217, 217, 209,\n",
              "         92,   0],\n",
              "       [  0,   0,   1,   4,   6,   7,   2,   0,   0,   0,   0,   0, 237,\n",
              "        226, 217, 223, 222, 219, 222, 221, 216, 223, 229, 215, 218, 255,\n",
              "         77,   0],\n",
              "       [  0,   3,   0,   0,   0,   0,   0,   0,   0,  62, 145, 204, 228,\n",
              "        207, 213, 221, 218, 208, 211, 218, 224, 223, 219, 215, 224, 244,\n",
              "        159,   0],\n",
              "       [  0,   0,   0,   0,  18,  44,  82, 107, 189, 228, 220, 222, 217,\n",
              "        226, 200, 205, 211, 230, 224, 234, 176, 188, 250, 248, 233, 238,\n",
              "        215,   0],\n",
              "       [  0,  57, 187, 208, 224, 221, 224, 208, 204, 214, 208, 209, 200,\n",
              "        159, 245, 193, 206, 223, 255, 255, 221, 234, 221, 211, 220, 232,\n",
              "        246,   0],\n",
              "       [  3, 202, 228, 224, 221, 211, 211, 214, 205, 205, 205, 220, 240,\n",
              "         80, 150, 255, 229, 221, 188, 154, 191, 210, 204, 209, 222, 228,\n",
              "        225,   0],\n",
              "       [ 98, 233, 198, 210, 222, 229, 229, 234, 249, 220, 194, 215, 217,\n",
              "        241,  65,  73, 106, 117, 168, 219, 221, 215, 217, 223, 223, 224,\n",
              "        229,  29],\n",
              "       [ 75, 204, 212, 204, 193, 205, 211, 225, 216, 185, 197, 206, 198,\n",
              "        213, 240, 195, 227, 245, 239, 223, 218, 212, 209, 222, 220, 221,\n",
              "        230,  67],\n",
              "       [ 48, 203, 183, 194, 213, 197, 185, 190, 194, 192, 202, 214, 219,\n",
              "        221, 220, 236, 225, 216, 199, 206, 186, 181, 177, 172, 181, 205,\n",
              "        206, 115],\n",
              "       [  0, 122, 219, 193, 179, 171, 183, 196, 204, 210, 213, 207, 211,\n",
              "        210, 200, 196, 194, 191, 195, 191, 198, 192, 176, 156, 167, 177,\n",
              "        210,  92],\n",
              "       [  0,   0,  74, 189, 212, 191, 175, 172, 175, 181, 185, 188, 189,\n",
              "        188, 193, 198, 204, 209, 210, 210, 211, 188, 188, 194, 192, 216,\n",
              "        170,   0],\n",
              "       [  2,   0,   0,   0,  66, 200, 222, 237, 239, 242, 246, 243, 244,\n",
              "        221, 220, 193, 191, 179, 182, 182, 181, 176, 166, 168,  99,  58,\n",
              "          0,   0],\n",
              "       [  0,   0,   0,   0,   0,   0,   0,  40,  61,  44,  72,  41,  35,\n",
              "          0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n",
              "          0,   0],\n",
              "       [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n",
              "          0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n",
              "          0,   0],\n",
              "       [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n",
              "          0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n",
              "          0,   0]], dtype=uint8)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 63
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "8xuvTgPNGURZ"
      },
      "source": [
        "x_train = (x_train / 255 - 0.5) * 2\n",
        "x_test = (x_test / 255 - 0.5) * 2"
      ],
      "execution_count": 64,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "mzOjx0qUO1-m",
        "outputId": "3e52264b-4d4e-465f-cbd6-6079e67512f2"
      },
      "source": [
        "x_train.max()"
      ],
      "execution_count": 65,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "1.0"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 65
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ZN6zf_FEO5IV",
        "outputId": "d791f449-c2e3-4074-fa76-86a983ea693a"
      },
      "source": [
        "x_train.min()"
      ],
      "execution_count": 66,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "-1.0"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 66
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "c5etRvuoHN_N"
      },
      "source": [
        "# AUTOENCODER EN 60s"
      ],
      "execution_count": 67,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "idbg2hmXHPJC"
      },
      "source": [
        "from keras.layers import Dense, Flatten, Reshape\n",
        "from keras.models import Sequential"
      ],
      "execution_count": 68,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "IPuz7FAmHiJ7"
      },
      "source": [
        "z_dim = 10\n",
        "h_dim = 100\n",
        "\n",
        "encoder = Sequential([\n",
        "                      Flatten(input_shape=(28,28)),\n",
        "                      Dense(h_dim, \"relu\"),\n",
        "                      Dense(h_dim / 2, \"relu\"),\n",
        "                      Dense(z_dim),\n",
        "])\n",
        "\n",
        "decoder = Sequential([\n",
        "                      Dense(h_dim / 2, \"relu\", input_shape=(z_dim,)),\n",
        "                      Dense(h_dim, \"relu\"),\n",
        "                      Dense(28*28, \"tanh\"),\n",
        "                      Reshape((28,28))\n",
        "])\n",
        "\n",
        "autoencoder = Sequential([encoder, decoder])"
      ],
      "execution_count": 69,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "FxratgoqJtKN",
        "outputId": "1c1183bb-9897-4337-cbf9-99379394cd83"
      },
      "source": [
        "encoder.summary()"
      ],
      "execution_count": 70,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Model: \"sequential_16\"\n",
            "_________________________________________________________________\n",
            "Layer (type)                 Output Shape              Param #   \n",
            "=================================================================\n",
            "flatten_6 (Flatten)          (None, 784)               0         \n",
            "_________________________________________________________________\n",
            "dense_33 (Dense)             (None, 100)               78500     \n",
            "_________________________________________________________________\n",
            "dense_34 (Dense)             (None, 50)                5050      \n",
            "_________________________________________________________________\n",
            "dense_35 (Dense)             (None, 10)                510       \n",
            "=================================================================\n",
            "Total params: 84,060\n",
            "Trainable params: 84,060\n",
            "Non-trainable params: 0\n",
            "_________________________________________________________________\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "6uhFhFlgKIrW",
        "outputId": "69038df2-e161-469c-94b8-62e21f31760e"
      },
      "source": [
        "encoder.predict(x_train[2:3])"
      ],
      "execution_count": 71,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[-1.0546746 , -0.04072259,  0.18366167, -0.14850932, -0.23464563,\n",
              "        -0.81793976, -0.6747857 ,  0.5593476 ,  0.51084983, -1.3188546 ]],\n",
              "      dtype=float32)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 71
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "h_n7hReCKNKf",
        "outputId": "1fe294ed-8fab-4c51-9af2-eadd0ecfad36"
      },
      "source": [
        "autoencoder.predict(x_train[4:5])"
      ],
      "execution_count": 72,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[[ 2.50273719e-02,  5.94512522e-02, -1.09903157e-01,\n",
              "          1.19071249e-02, -7.33720139e-02,  4.52715605e-02,\n",
              "          4.58633192e-02, -2.50708889e-02,  6.63020685e-02,\n",
              "         -2.21906044e-02, -6.80448161e-03,  8.88171792e-02,\n",
              "          2.35625301e-02, -3.25805061e-02,  4.42941720e-03,\n",
              "          7.87463039e-03, -6.35047033e-02, -3.77760679e-02,\n",
              "          6.03474416e-02, -3.78072225e-02,  1.65619105e-02,\n",
              "         -2.59915031e-02,  4.93536368e-02, -2.53680833e-02,\n",
              "          1.17845982e-02,  2.98316889e-02, -6.49651885e-02,\n",
              "          1.58781543e-01],\n",
              "        [-3.72539386e-02,  6.57486077e-03,  8.04120526e-02,\n",
              "         -1.81460171e-03,  1.02254599e-01, -3.48914526e-02,\n",
              "         -9.02955681e-02,  9.58337076e-03, -2.17127297e-02,\n",
              "         -5.37252016e-02, -6.04549460e-02, -5.26076462e-03,\n",
              "         -2.44859233e-02,  3.61115932e-02, -6.56157658e-02,\n",
              "         -3.68259661e-02,  4.65136059e-02,  4.22639586e-02,\n",
              "          1.66587792e-02, -8.01960099e-03,  8.52298141e-02,\n",
              "         -5.90408482e-02,  9.99506637e-02,  7.27713779e-02,\n",
              "          1.49314046e-01,  2.35531223e-03, -3.50002237e-02,\n",
              "         -9.96219143e-02],\n",
              "        [ 2.44253548e-03,  1.75687037e-02,  8.72494876e-02,\n",
              "          1.51712289e-02,  4.86922264e-02,  9.33934078e-02,\n",
              "          9.74165797e-02,  6.19409047e-02,  1.01647951e-01,\n",
              "         -1.13310982e-02, -3.64457034e-02, -9.93651152e-02,\n",
              "          1.31619368e-02, -6.82275626e-04, -1.11137675e-02,\n",
              "          1.24352723e-01, -3.76273021e-02,  3.50144506e-03,\n",
              "         -8.05933774e-02, -5.09201922e-03, -6.33477941e-02,\n",
              "          4.82378341e-02,  5.68438880e-02, -8.66533890e-02,\n",
              "          8.15898180e-02, -1.13862893e-02, -4.07406464e-02,\n",
              "         -8.62056240e-02],\n",
              "        [-3.31986370e-03,  3.87209728e-02,  2.80559920e-02,\n",
              "          9.79794655e-03, -3.18793133e-02,  1.36234835e-01,\n",
              "          5.98746166e-02,  4.26286720e-02,  5.21712983e-03,\n",
              "          7.20984070e-03,  9.91038308e-02,  3.92362401e-02,\n",
              "         -4.35212664e-02,  9.00580287e-02,  2.91934256e-02,\n",
              "          1.35058044e-02, -2.16125231e-02,  2.75719874e-02,\n",
              "         -1.99403539e-02,  4.99319695e-02, -5.46546765e-02,\n",
              "         -1.72018588e-01, -6.81402236e-02, -4.42842469e-02,\n",
              "         -9.75778326e-03,  1.36554185e-02, -3.54313268e-03,\n",
              "          1.25506707e-02],\n",
              "        [-8.30561444e-02,  2.99060587e-02, -7.36921802e-02,\n",
              "          4.09682933e-03,  4.23374437e-02, -1.61847509e-02,\n",
              "          2.28193067e-02, -4.14332338e-02,  1.45942541e-02,\n",
              "          7.82347098e-03, -2.36451067e-02,  8.10809731e-02,\n",
              "         -1.06460890e-02, -1.20377079e-01, -1.38211437e-02,\n",
              "         -3.25809754e-02, -3.82824540e-02,  1.12666003e-02,\n",
              "          8.10201764e-02, -7.95489103e-02, -5.07896254e-03,\n",
              "          3.40044014e-02,  4.00042208e-03, -4.78935502e-02,\n",
              "          8.34197253e-02, -8.33372921e-02,  8.52045137e-03,\n",
              "          2.37350557e-02],\n",
              "        [-1.07808121e-01, -4.78938557e-02, -1.75312255e-02,\n",
              "          2.67561767e-02,  4.51773405e-02,  1.14228010e-01,\n",
              "          6.85041174e-02,  2.35277768e-02,  1.03346288e-01,\n",
              "          6.85084388e-02,  1.05080036e-02, -9.13006738e-02,\n",
              "         -3.32655534e-02, -8.81094635e-02, -1.51264280e-01,\n",
              "         -1.39092937e-01, -1.26627818e-01,  3.27067152e-02,\n",
              "          6.28959164e-02, -3.24818529e-02, -8.03806558e-02,\n",
              "         -8.55580866e-02, -1.27616152e-02, -1.14434727e-01,\n",
              "          4.21797112e-02,  2.01348159e-02, -8.61909017e-02,\n",
              "          1.81784555e-02],\n",
              "        [-9.25610065e-02,  7.87206665e-02, -1.30878106e-01,\n",
              "          1.37258425e-01,  9.28646922e-02,  4.94832247e-02,\n",
              "         -5.84678464e-02, -6.99527189e-02, -3.98985222e-02,\n",
              "         -1.23267919e-02, -5.80966845e-02, -9.49912965e-02,\n",
              "         -1.29251167e-01,  7.28815272e-02,  2.87569705e-02,\n",
              "         -1.40854465e-02,  3.68169136e-03, -1.84540953e-02,\n",
              "         -7.07486197e-02, -4.31711376e-02, -1.80085897e-02,\n",
              "         -1.04469191e-02,  1.63131654e-01,  3.40909958e-02,\n",
              "         -6.01365753e-02,  1.05979428e-01,  4.40025628e-02,\n",
              "         -3.02630551e-02],\n",
              "        [ 2.19880622e-02,  1.04885064e-02,  1.05644368e-01,\n",
              "          3.49631943e-02,  5.52640557e-02, -9.63631794e-02,\n",
              "          3.64200287e-02, -2.84088627e-02,  5.30882133e-03,\n",
              "          2.05677003e-04, -3.63585241e-02,  2.09084619e-02,\n",
              "          4.45130356e-02, -2.86405738e-02, -7.66052604e-02,\n",
              "         -8.34777802e-02,  7.61127397e-02,  5.78044653e-02,\n",
              "          5.99961616e-02,  1.18631549e-01,  6.59040809e-02,\n",
              "          1.99286267e-04,  8.89286865e-03,  1.17929420e-02,\n",
              "          3.11072096e-02,  5.57407886e-02, -2.26234067e-02,\n",
              "         -1.04480907e-01],\n",
              "        [-1.48049563e-01,  4.72889021e-02,  1.34959459e-01,\n",
              "         -5.94365858e-02, -6.09686114e-02,  2.07545925e-02,\n",
              "         -1.41331647e-02, -6.35821819e-02, -1.44147545e-01,\n",
              "         -2.03264579e-02, -1.57245565e-02,  1.17789414e-02,\n",
              "          2.09867069e-03, -1.95510276e-02, -3.36701386e-02,\n",
              "         -2.26415563e-02,  4.02801819e-02, -9.27387550e-02,\n",
              "         -3.07779554e-02,  8.93324688e-02,  7.29687558e-03,\n",
              "          7.00664148e-02,  5.79127744e-02, -4.15225886e-02,\n",
              "          6.84741437e-02,  1.41114108e-02,  3.67491110e-03,\n",
              "          4.05485108e-02],\n",
              "        [-5.43851815e-02, -5.35408221e-02,  5.24488986e-02,\n",
              "          4.83733192e-02, -1.56183168e-01,  1.21675864e-01,\n",
              "          6.33475408e-02,  4.48465459e-02, -1.83293615e-02,\n",
              "          8.50980356e-02,  2.92900689e-02,  3.00072860e-02,\n",
              "          1.03464453e-02, -6.65648356e-02,  4.11015563e-02,\n",
              "         -6.24493361e-02,  2.88609099e-02,  2.47077201e-03,\n",
              "          5.42987175e-02, -7.13779218e-03,  3.74366380e-02,\n",
              "         -3.43673415e-02, -1.90221399e-01, -6.16624835e-04,\n",
              "          2.44273208e-02, -1.88446566e-02, -1.09717948e-02,\n",
              "         -3.52896042e-02],\n",
              "        [ 5.44497818e-02,  2.82861069e-02, -9.47623327e-02,\n",
              "         -2.08841935e-02,  5.21366447e-02,  3.31731439e-02,\n",
              "          1.09429836e-01,  5.89454658e-02, -4.96365055e-02,\n",
              "         -1.07023232e-01,  2.41749622e-02, -1.25142813e-01,\n",
              "         -1.77461028e-01,  1.71797648e-02, -7.32196271e-02,\n",
              "          8.03891420e-02, -1.05025604e-01,  2.15058122e-02,\n",
              "          5.57429865e-02,  9.41251591e-02,  3.79183218e-02,\n",
              "         -1.03679076e-01, -2.16306187e-02,  5.05142026e-02,\n",
              "          5.21344021e-02,  1.20313160e-01, -8.03539157e-02,\n",
              "          2.32381672e-02],\n",
              "        [-3.10689211e-04, -5.07223383e-02,  8.08128193e-02,\n",
              "          6.17864802e-02,  7.83650670e-03,  1.05389498e-01,\n",
              "          7.73646450e-03,  4.14817818e-02, -1.42888119e-02,\n",
              "         -5.90978488e-02, -1.48818538e-01,  6.52615204e-02,\n",
              "         -2.09236760e-02, -2.01372150e-03, -2.09222138e-02,\n",
              "         -2.76900660e-02,  2.41085887e-02,  2.99370233e-02,\n",
              "         -2.59933937e-02,  5.69339767e-02, -2.24852040e-02,\n",
              "          1.61664728e-02, -1.11010876e-02,  1.35859609e-01,\n",
              "          5.44556864e-02,  2.27874471e-03,  6.85728490e-02,\n",
              "          1.49306074e-01],\n",
              "        [-1.34826191e-02,  5.33807762e-02, -1.19186953e-01,\n",
              "         -2.10515726e-02,  7.77603909e-02, -5.17401658e-03,\n",
              "          7.22476169e-02,  4.08154074e-03, -3.46240997e-02,\n",
              "          8.60355794e-05,  4.97246645e-02,  2.52823271e-02,\n",
              "          9.28481668e-03, -1.39905177e-02, -1.22021930e-02,\n",
              "          8.41062367e-02,  7.21661225e-02,  9.74238440e-02,\n",
              "          4.43606973e-02,  2.52977554e-02, -8.43637139e-02,\n",
              "          2.44236421e-02, -1.72981750e-02, -2.18726359e-02,\n",
              "         -1.36871645e-02,  1.44857941e-02, -7.92298466e-02,\n",
              "          5.14621288e-02],\n",
              "        [ 5.03200442e-02,  9.31677371e-02,  2.34565441e-03,\n",
              "          8.07318166e-02, -9.57891271e-02, -1.94857002e-03,\n",
              "          2.80385707e-02, -5.14020547e-02, -2.41519958e-02,\n",
              "         -2.79686041e-02,  1.08422653e-03,  1.40162231e-02,\n",
              "          7.51895681e-02, -2.66154464e-02,  2.37927940e-02,\n",
              "         -1.19693629e-01,  7.66577497e-02,  1.35533169e-01,\n",
              "         -2.32335422e-02,  1.73619837e-02, -1.01468399e-01,\n",
              "          5.57814678e-03,  3.85353975e-02, -5.30632585e-02,\n",
              "         -4.55290787e-02,  3.38123343e-03,  1.40246712e-02,\n",
              "          6.25117645e-02],\n",
              "        [-1.85711086e-02,  4.27640416e-02,  7.85990730e-02,\n",
              "          3.09030749e-02, -2.85355262e-02, -1.60668362e-02,\n",
              "          5.89694781e-03, -4.40428592e-02, -2.54275985e-02,\n",
              "          3.90359238e-02,  3.68331484e-02, -1.94205754e-02,\n",
              "         -6.26695305e-02, -2.16975927e-01, -2.26786397e-02,\n",
              "         -7.39177093e-02, -3.08746286e-02,  3.42309177e-02,\n",
              "          8.51776265e-03,  3.58628761e-03, -1.09824002e-01,\n",
              "         -1.08718814e-03, -5.66919856e-02, -6.11025468e-02,\n",
              "          4.23302837e-02,  1.27903642e-02, -7.82480091e-02,\n",
              "         -3.77328098e-02],\n",
              "        [ 9.01226997e-02,  4.15767692e-02,  6.55432343e-02,\n",
              "         -1.47117600e-02,  7.63866156e-02,  5.15636764e-02,\n",
              "          4.31913370e-03, -7.72797549e-03, -5.36387190e-02,\n",
              "          4.92340587e-02, -2.78670378e-02,  9.24347043e-02,\n",
              "         -4.24657427e-02,  1.42070830e-01, -5.33026829e-02,\n",
              "         -1.05547875e-01, -7.50861540e-02,  1.33044168e-01,\n",
              "          6.26093745e-02,  5.57056777e-02,  3.84497978e-02,\n",
              "          1.07788898e-01,  2.85811145e-02, -7.37969652e-02,\n",
              "         -3.23920287e-02, -6.03234544e-02, -4.30521183e-02,\n",
              "          2.26639211e-04],\n",
              "        [-1.22083714e-02, -5.19601554e-02, -5.81022054e-02,\n",
              "          4.76610437e-02,  1.45169228e-01, -5.53967357e-02,\n",
              "          1.42371804e-02, -3.76184704e-03,  4.17095190e-03,\n",
              "          1.91875850e-03,  2.94673759e-02,  2.25635841e-02,\n",
              "          3.35298888e-02, -6.18544854e-02, -1.21381246e-02,\n",
              "         -1.09136112e-01, -7.92621449e-02, -3.93613242e-03,\n",
              "          5.82930408e-02,  2.23524440e-02, -2.75297035e-02,\n",
              "         -5.17768152e-02, -3.79940383e-02,  1.67470872e-02,\n",
              "         -2.04947479e-02,  2.71538626e-02, -2.11083684e-02,\n",
              "          1.45661803e-02],\n",
              "        [-1.00278631e-01,  5.22606820e-03, -4.89206463e-02,\n",
              "         -7.31423721e-02, -1.35567850e-02,  4.37512249e-02,\n",
              "         -1.10211978e-02,  1.29884526e-01, -2.09186506e-02,\n",
              "          1.14345234e-02, -1.01805039e-01,  6.98677963e-03,\n",
              "          2.75225565e-02, -4.75899279e-02, -9.50680673e-02,\n",
              "          7.92226419e-02,  5.12008443e-02,  1.25801107e-02,\n",
              "         -5.86858839e-02,  9.08250138e-02,  5.27852513e-02,\n",
              "         -2.13016085e-02,  6.10091314e-02,  1.78014040e-02,\n",
              "         -5.05935922e-02, -4.43383120e-02, -3.15808579e-02,\n",
              "          2.31867302e-02],\n",
              "        [ 3.38130593e-02, -1.34727538e-01, -5.64068444e-02,\n",
              "         -3.19232158e-02,  1.21757902e-01, -6.75387904e-02,\n",
              "         -9.55958068e-02, -1.29831672e-01,  2.85274386e-02,\n",
              "         -1.12057358e-01,  7.79180601e-02, -3.77411321e-02,\n",
              "          1.18249007e-01,  1.27370477e-01, -1.49169294e-02,\n",
              "         -1.19381242e-01,  5.91911599e-02, -2.93691717e-02,\n",
              "          7.60722086e-02,  6.95813447e-02, -3.34211439e-02,\n",
              "         -5.88381216e-02, -2.89919470e-02,  1.75055526e-02,\n",
              "          1.84276719e-02, -1.19304851e-01,  1.04425751e-01,\n",
              "          2.94513237e-02],\n",
              "        [-8.15643836e-03, -8.57147276e-02,  1.33512124e-01,\n",
              "         -5.68876006e-02,  3.25275660e-02, -2.76701860e-02,\n",
              "         -8.04200675e-03, -3.59069891e-02, -1.74249694e-01,\n",
              "         -1.15275711e-01, -5.45324460e-02, -2.33679563e-02,\n",
              "         -1.05150603e-01,  2.18068194e-02,  2.77411677e-02,\n",
              "         -4.30964679e-02,  2.14576926e-02, -1.12264082e-01,\n",
              "          1.62899606e-02,  6.54176548e-02, -2.14352049e-02,\n",
              "         -1.02849305e-01, -2.34860927e-05, -9.19402391e-02,\n",
              "         -7.16483518e-02, -4.49179709e-02,  1.14808455e-01,\n",
              "         -1.25518590e-01],\n",
              "        [ 9.74937528e-02,  1.02298819e-01, -1.32488727e-03,\n",
              "          2.84931324e-02, -1.29469289e-02,  2.71781217e-02,\n",
              "         -7.41777988e-03, -1.04747325e-01,  6.86777458e-02,\n",
              "         -3.77318934e-02, -1.08881950e-01,  4.11692634e-02,\n",
              "         -6.39110282e-02,  1.48412567e-02, -4.46815155e-02,\n",
              "         -2.79116929e-02, -1.18009513e-02,  6.44172207e-02,\n",
              "         -8.25078338e-02, -3.30114402e-02, -3.12541947e-02,\n",
              "          2.41473950e-02,  5.51083870e-02,  9.71292630e-02,\n",
              "          8.19739997e-02, -1.85859837e-02, -7.67725660e-03,\n",
              "          8.42587873e-02],\n",
              "        [-1.30168200e-02,  7.10812677e-03,  3.70660089e-02,\n",
              "         -6.51106089e-02, -6.13265932e-02,  2.32102368e-02,\n",
              "         -2.61305925e-02, -1.89463466e-01, -8.54039937e-03,\n",
              "         -8.46609324e-02,  4.74667214e-02, -1.46562150e-02,\n",
              "         -3.95416319e-02,  8.02400708e-02,  4.90387417e-02,\n",
              "          3.18085738e-02, -7.07820579e-02,  4.45569493e-02,\n",
              "          5.98799298e-03, -1.52822495e-01, -2.36205235e-02,\n",
              "          1.47941455e-01, -2.68728714e-02, -3.24332714e-02,\n",
              "          4.79447432e-02,  6.01120368e-02,  1.53102487e-01,\n",
              "          1.88813619e-02],\n",
              "        [ 8.70141611e-02, -9.64512024e-03,  1.00462683e-01,\n",
              "          4.64228168e-02, -1.13400593e-01,  1.05581572e-02,\n",
              "         -3.89026031e-02,  2.63168830e-02, -7.44158849e-02,\n",
              "         -7.06211030e-02, -7.58860959e-03,  6.93328828e-02,\n",
              "          1.14589147e-02,  4.71115038e-02,  3.09986044e-02,\n",
              "          1.61905363e-01,  2.37663351e-02, -1.22224525e-01,\n",
              "         -2.16394011e-02,  7.29389191e-02, -4.50912639e-02,\n",
              "         -2.89840135e-03,  2.29422208e-02, -7.57270753e-02,\n",
              "         -8.03837273e-03, -9.51444358e-02, -4.46936078e-02,\n",
              "          3.97977978e-02],\n",
              "        [-5.52100167e-02,  8.62748101e-02, -2.92206910e-02,\n",
              "         -1.97878852e-02, -7.67427832e-02, -9.94516537e-02,\n",
              "          1.26349404e-02, -4.82075615e-03, -1.47586176e-02,\n",
              "         -3.89452763e-02,  9.83977765e-02,  6.91520656e-03,\n",
              "          5.06153479e-02,  5.07985875e-02, -1.15549341e-02,\n",
              "          9.80669558e-02,  1.05229579e-01,  8.80509019e-02,\n",
              "         -2.92719174e-02, -1.84290316e-02,  3.08644604e-02,\n",
              "          5.68797141e-02,  2.38624904e-02,  8.45668390e-02,\n",
              "          4.35007103e-02, -4.33877446e-02, -3.70270573e-02,\n",
              "         -9.31224152e-02],\n",
              "        [-8.22866485e-02, -1.18361592e-01, -1.18316531e-01,\n",
              "         -1.13457181e-01, -2.17839945e-02, -6.12259880e-02,\n",
              "         -1.67156965e-01,  5.26549295e-02, -3.88403647e-02,\n",
              "          5.48345782e-02,  8.12117308e-02, -9.23052023e-04,\n",
              "          2.60789786e-02,  6.58316165e-02,  3.01891081e-02,\n",
              "          4.68675718e-02,  1.07026160e-01,  2.66849212e-02,\n",
              "         -6.22543097e-02, -1.87957811e-03, -8.68967548e-03,\n",
              "         -9.77623612e-02, -5.74026629e-02, -1.36632705e-02,\n",
              "          2.53724325e-02,  2.91253757e-02,  3.36694047e-02,\n",
              "         -1.06061029e-03],\n",
              "        [ 5.00060990e-02, -1.46837085e-02, -1.21266255e-02,\n",
              "          3.99875781e-03,  8.73014405e-02,  2.07685749e-03,\n",
              "          1.74003318e-02,  1.07246600e-01, -5.83321750e-02,\n",
              "         -6.81632236e-02,  3.76254581e-02, -1.64767671e-02,\n",
              "         -4.65576313e-02,  5.65027669e-02,  1.24389064e-02,\n",
              "          4.93197888e-02, -9.19860825e-02,  3.53866220e-02,\n",
              "         -1.27320802e-02,  2.63134167e-02,  1.06107285e-02,\n",
              "          4.73844185e-02,  4.01823744e-02,  7.97858909e-02,\n",
              "          1.94680132e-02,  1.05968177e-01, -1.12153934e-02,\n",
              "         -8.19177181e-02],\n",
              "        [ 2.38317568e-02, -4.47078645e-02,  9.05108638e-03,\n",
              "         -3.63616534e-02, -1.20859280e-01,  6.14941083e-02,\n",
              "         -7.98990801e-02,  1.37465850e-01,  1.02717010e-02,\n",
              "         -1.65857360e-01, -8.09705816e-03,  2.31684092e-02,\n",
              "          4.44024662e-03,  4.36776988e-02, -1.22930966e-01,\n",
              "         -6.42266348e-02, -2.11001211e-03,  6.26998320e-02,\n",
              "          2.70680226e-02, -3.49330902e-02,  1.22462548e-01,\n",
              "         -5.85320331e-02, -4.08646651e-02, -6.55758753e-02,\n",
              "         -3.76230106e-02,  1.00246705e-02, -6.11969596e-03,\n",
              "          6.03977330e-02],\n",
              "        [ 1.65177211e-02, -1.83735378e-02, -1.14815526e-01,\n",
              "         -1.01392761e-01,  7.15715438e-03, -3.58318165e-02,\n",
              "         -9.86623578e-03,  6.91894665e-02,  1.85926035e-01,\n",
              "         -4.17104317e-03, -5.98620027e-02, -7.37866852e-03,\n",
              "         -9.84034762e-02,  1.06747933e-01, -1.13076465e-02,\n",
              "          7.43797272e-02, -2.87456531e-02,  7.67498761e-02,\n",
              "          2.04828102e-02,  2.78022904e-02, -1.05414484e-02,\n",
              "          6.46510869e-02, -1.97955500e-02,  9.32963341e-02,\n",
              "          3.28910425e-02,  3.57772633e-02,  1.03943544e-02,\n",
              "          4.57557738e-02]]], dtype=float32)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 72
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "QjycW4ccKTH_",
        "outputId": "ee233abe-2f95-4304-b33c-6b1ab032d4ad"
      },
      "source": [
        "autoencoder.summary()"
      ],
      "execution_count": 73,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Model: \"sequential_18\"\n",
            "_________________________________________________________________\n",
            "Layer (type)                 Output Shape              Param #   \n",
            "=================================================================\n",
            "sequential_16 (Sequential)   (None, 10)                84060     \n",
            "_________________________________________________________________\n",
            "sequential_17 (Sequential)   (None, 28, 28)            84834     \n",
            "=================================================================\n",
            "Total params: 168,894\n",
            "Trainable params: 168,894\n",
            "Non-trainable params: 0\n",
            "_________________________________________________________________\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "teH9JePcKYlE"
      },
      "source": [
        "from keras.optimizers import Adam\n",
        "\n",
        "autoencoder.compile(Adam(), loss=\"mse\")"
      ],
      "execution_count": 74,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Q_sfkEl4Lqoc",
        "outputId": "8dbd11ce-e829-4817-d631-93310249e65f"
      },
      "source": [
        "autoencoder.fit(x_train, x_train, batch_size=512, epochs=40, validation_data=(x_test, x_test))"
      ],
      "execution_count": 75,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Epoch 1/40\n",
            "118/118 [==============================] - 2s 7ms/step - loss: 0.3446 - val_loss: 0.1115\n",
            "Epoch 2/40\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 0.1031 - val_loss: 0.0891\n",
            "Epoch 3/40\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 0.0860 - val_loss: 0.0801\n",
            "Epoch 4/40\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 0.0788 - val_loss: 0.0758\n",
            "Epoch 5/40\n",
            "118/118 [==============================] - 1s 4ms/step - loss: 0.0749 - val_loss: 0.0729\n",
            "Epoch 6/40\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 0.0715 - val_loss: 0.0710\n",
            "Epoch 7/40\n",
            "118/118 [==============================] - 1s 4ms/step - loss: 0.0698 - val_loss: 0.0689\n",
            "Epoch 8/40\n",
            "118/118 [==============================] - 1s 4ms/step - loss: 0.0682 - val_loss: 0.0677\n",
            "Epoch 9/40\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 0.0667 - val_loss: 0.0669\n",
            "Epoch 10/40\n",
            "118/118 [==============================] - 1s 4ms/step - loss: 0.0657 - val_loss: 0.0658\n",
            "Epoch 11/40\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 0.0651 - val_loss: 0.0651\n",
            "Epoch 12/40\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 0.0639 - val_loss: 0.0642\n",
            "Epoch 13/40\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 0.0634 - val_loss: 0.0636\n",
            "Epoch 14/40\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 0.0626 - val_loss: 0.0631\n",
            "Epoch 15/40\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 0.0622 - val_loss: 0.0625\n",
            "Epoch 16/40\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 0.0617 - val_loss: 0.0620\n",
            "Epoch 17/40\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 0.0607 - val_loss: 0.0620\n",
            "Epoch 18/40\n",
            "118/118 [==============================] - 1s 4ms/step - loss: 0.0607 - val_loss: 0.0615\n",
            "Epoch 19/40\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 0.0602 - val_loss: 0.0609\n",
            "Epoch 20/40\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 0.0600 - val_loss: 0.0608\n",
            "Epoch 21/40\n",
            "118/118 [==============================] - 1s 4ms/step - loss: 0.0599 - val_loss: 0.0604\n",
            "Epoch 22/40\n",
            "118/118 [==============================] - 1s 4ms/step - loss: 0.0596 - val_loss: 0.0603\n",
            "Epoch 23/40\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 0.0592 - val_loss: 0.0600\n",
            "Epoch 24/40\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 0.0586 - val_loss: 0.0597\n",
            "Epoch 25/40\n",
            "118/118 [==============================] - 1s 4ms/step - loss: 0.0585 - val_loss: 0.0596\n",
            "Epoch 26/40\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 0.0586 - val_loss: 0.0592\n",
            "Epoch 27/40\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 0.0579 - val_loss: 0.0591\n",
            "Epoch 28/40\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 0.0583 - val_loss: 0.0591\n",
            "Epoch 29/40\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 0.0577 - val_loss: 0.0588\n",
            "Epoch 30/40\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 0.0577 - val_loss: 0.0585\n",
            "Epoch 31/40\n",
            "118/118 [==============================] - 1s 4ms/step - loss: 0.0577 - val_loss: 0.0583\n",
            "Epoch 32/40\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 0.0574 - val_loss: 0.0582\n",
            "Epoch 33/40\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 0.0575 - val_loss: 0.0581\n",
            "Epoch 34/40\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 0.0569 - val_loss: 0.0581\n",
            "Epoch 35/40\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 0.0567 - val_loss: 0.0579\n",
            "Epoch 36/40\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 0.0565 - val_loss: 0.0577\n",
            "Epoch 37/40\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 0.0566 - val_loss: 0.0575\n",
            "Epoch 38/40\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 0.0562 - val_loss: 0.0575\n",
            "Epoch 39/40\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 0.0565 - val_loss: 0.0573\n",
            "Epoch 40/40\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 0.0560 - val_loss: 0.0571\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<keras.callbacks.History at 0x7f7cae71b210>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 75
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "7G9Ds9ihMvq2"
      },
      "source": [
        "history = _"
      ],
      "execution_count": 76,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 282
        },
        "id": "72FFyEOmNs_r",
        "outputId": "aa3341c7-80d4-4157-bdda-a92263f3a0a8"
      },
      "source": [
        "plt.imshow(x_test[4])"
      ],
      "execution_count": 77,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.image.AxesImage at 0x7f7cae5cb350>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 77
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 282
        },
        "id": "HTMLaLyxNlvN",
        "outputId": "aee8af5b-697f-4053-e787-deb292572c98"
      },
      "source": [
        "plt.imshow( autoencoder.predict(x_test[4:5])[0] )"
      ],
      "execution_count": 78,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.image.AxesImage at 0x7f7cae534d10>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 78
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 282
        },
        "id": "SpP6lta5Nwdi",
        "outputId": "174401d8-d567-4aba-f3cb-622b6d254a53"
      },
      "source": [
        "plt.imshow(x_train[4])"
      ],
      "execution_count": 79,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.image.AxesImage at 0x7f7cb335b850>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 79
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 282
        },
        "id": "mexAktORN1Tn",
        "outputId": "82e7b617-a0fb-4327-d550-9563065d14a4"
      },
      "source": [
        "plt.imshow( autoencoder.predict(x_train[4:5])[0] )"
      ],
      "execution_count": 80,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.image.AxesImage at 0x7f7cb214b990>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 80
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 282
        },
        "id": "ul0lhosgN14C",
        "outputId": "97e15758-60db-41ee-bbe5-936f24bc68ad"
      },
      "source": [
        "plt.plot(history.history['loss'])\n",
        "plt.plot(history.history['val_loss'])"
      ],
      "execution_count": 81,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[<matplotlib.lines.Line2D at 0x7f7cb33e9e50>]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 81
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 282
        },
        "id": "6D5buAiTPggD",
        "outputId": "37f6fe63-c3cb-4ad3-d3dc-af34e553ccba"
      },
      "source": [
        "plt.imshow(x_test[51])"
      ],
      "execution_count": 87,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.image.AxesImage at 0x7f7cae1cac50>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 87
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 282
        },
        "id": "UExG4qWqQMwi",
        "outputId": "97c78c95-e481-40cb-f11d-7bd983fb8860"
      },
      "source": [
        "plt.imshow( autoencoder.predict(x_test[51:52])[0] )"
      ],
      "execution_count": 89,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.image.AxesImage at 0x7f7cae0c9550>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 89
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Qh1h2F92QZgA"
      },
      "source": [
        "# VAE"
      ],
      "execution_count": 90,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "U2Y4afNJQxH8"
      },
      "source": [
        "tiene de diferente\n",
        "1. capa de sampling (muestreo).\n",
        "2. ver como lidiamos con la KL.\n",
        "3. encoder con varias salidas y tal"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "J6h-BsUFQoyf"
      },
      "source": [
        "# encoder\n",
        "\n",
        "encoder_head = Sequential([\n",
        "                           Flatten(input_shape=(28,28)),\n",
        "                           Dense(h_dim, \"relu\"),\n",
        "])"
      ],
      "execution_count": 104,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Ov8BBcK9RnHV"
      },
      "source": [
        "from keras.layers import Input\n",
        "from keras.models import Model"
      ],
      "execution_count": 105,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "0lSkGtxgRzD_"
      },
      "source": [
        "inp = Input(shape=(28,28))\n",
        "h = encoder_head(inp)\n",
        "\n",
        "mu = Dense(z_dim)(h)\n",
        "log_std = Dense(z_dim)(h)"
      ],
      "execution_count": 106,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "nVg0qQMoR5kW"
      },
      "source": [
        "encoder_mean = Model(inp, mu)   # va a ser útil para reducir dimensionalidad, no lo usaremos para entrenar."
      ],
      "execution_count": 107,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ZsYExW3jR6J3",
        "outputId": "e6b492bc-ed26-45e8-a75a-f57dd5579c67"
      },
      "source": [
        "encoder_mean.summary()"
      ],
      "execution_count": 108,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Model: \"model_1\"\n",
            "_________________________________________________________________\n",
            "Layer (type)                 Output Shape              Param #   \n",
            "=================================================================\n",
            "input_6 (InputLayer)         [(None, 28, 28)]          0         \n",
            "_________________________________________________________________\n",
            "sequential_20 (Sequential)   (None, 100)               78500     \n",
            "_________________________________________________________________\n",
            "dense_44 (Dense)             (None, 10)                1010      \n",
            "=================================================================\n",
            "Total params: 79,510\n",
            "Trainable params: 79,510\n",
            "Non-trainable params: 0\n",
            "_________________________________________________________________\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "lA85zkKcVJTe",
        "outputId": "33f9ae24-6b3d-4b02-eb0a-886c44bc0e84"
      },
      "source": [
        "!pip install keras.utils"
      ],
      "execution_count": 113,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Collecting keras.utils\n",
            "  Downloading https://files.pythonhosted.org/packages/31/a2/8be2aee1c8cd388e83d447556c2c84a396944c8bad93d710c5e757f8e98e/keras-utils-1.0.13.tar.gz\n",
            "Requirement already satisfied: Keras>=2.1.5 in /usr/local/lib/python3.7/dist-packages (from keras.utils) (2.4.3)\n",
            "Requirement already satisfied: scipy>=0.14 in /usr/local/lib/python3.7/dist-packages (from Keras>=2.1.5->keras.utils) (1.4.1)\n",
            "Requirement already satisfied: numpy>=1.9.1 in /usr/local/lib/python3.7/dist-packages (from Keras>=2.1.5->keras.utils) (1.19.5)\n",
            "Requirement already satisfied: pyyaml in /usr/local/lib/python3.7/dist-packages (from Keras>=2.1.5->keras.utils) (3.13)\n",
            "Requirement already satisfied: h5py in /usr/local/lib/python3.7/dist-packages (from Keras>=2.1.5->keras.utils) (3.1.0)\n",
            "Requirement already satisfied: cached-property; python_version < \"3.8\" in /usr/local/lib/python3.7/dist-packages (from h5py->Keras>=2.1.5->keras.utils) (1.5.2)\n",
            "Building wheels for collected packages: keras.utils\n",
            "  Building wheel for keras.utils (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
            "  Created wheel for keras.utils: filename=keras_utils-1.0.13-cp37-none-any.whl size=2657 sha256=2ec6af3a70fa02a1363c55eae55bc1c75854ddbdbeb508062ba1c5b158b762de\n",
            "  Stored in directory: /root/.cache/pip/wheels/46/25/27/7707005c1cb27e1ffc8277b004ac295e34767b02b44d73d6be\n",
            "Successfully built keras.utils\n",
            "Installing collected packages: keras.utils\n",
            "Successfully installed keras.utils\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 312
        },
        "id": "vNvjBck4TnCB",
        "outputId": "f69f8fe1-bda9-48f2-fa09-830bd2419a99"
      },
      "source": [
        "from tensorflow.keras.utils import plot_model\n",
        "plot_model(encoder_mean, show_shapes=True, show_layer_names=True)"
      ],
      "execution_count": 117,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<IPython.core.display.Image object>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 117
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "FLkRxVK6U8V_"
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "39-EQ1dmUfI6"
      },
      "source": [
        "# capas custom"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "kHYIp8VlUfbi",
        "outputId": "0c165a43-9d68-4943-f4f3-1497198e5e99"
      },
      "source": [
        "# paréntesis\n",
        "f = lambda x: x**2\n",
        "f(4)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "16"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 118
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ZhWMBHNpUfeI"
      },
      "source": [
        "from keras.layers import Lambda\n",
        "# capas lambda\n",
        "\n",
        "inppp = Input(shape=(1,))\n",
        "outtt = Lambda(lambda x: x**2)(inppp)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "luJslFeDUfht",
        "outputId": "e08aae7b-3b3a-4f60-eb52-c28b0b7356b6"
      },
      "source": [
        "square_model = Model(inppp, outtt)\n",
        "square_model.predict([2.,3.,4.])"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[ 4.],\n",
              "       [ 9.],\n",
              "       [16.]], dtype=float32)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 122
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "9OyXB1GlXbYI",
        "outputId": "18b1902a-3836-4675-b07a-3796648fb37c"
      },
      "source": [
        "square_model.summary()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Model: \"model_2\"\n",
            "_________________________________________________________________\n",
            "Layer (type)                 Output Shape              Param #   \n",
            "=================================================================\n",
            "input_8 (InputLayer)         [(None, 1)]               0         \n",
            "_________________________________________________________________\n",
            "lambda (Lambda)              (None, 1)                 0         \n",
            "=================================================================\n",
            "Total params: 0\n",
            "Trainable params: 0\n",
            "Non-trainable params: 0\n",
            "_________________________________________________________________\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "VQzAGeToUfjp"
      },
      "source": [
        "# fin paréntesis. capa de sampling.\n",
        "import tensorflow as tf\n",
        "\n",
        "def sample(inputs):\n",
        "  mu, log_std = inputs\n",
        "  epsilon = tf.random.normal(shape=(tf.shape(mu)[0], tf.shape(mu)[1]))\n",
        "  return epsilon * tf.exp(log_std) + mu\n",
        "\n",
        "Sampling = Lambda(sample)"
      ],
      "execution_count": 127,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "pBxMXGYramoU"
      },
      "source": [
        "# testear la capa\n",
        "muuu1 = Input(shape=(1,))\n",
        "logstdd1 = Input(shape=(1,))\n",
        "outtt = Sampling([muuu1, logstdd1])\n",
        "sampler = Model([muuu1, logstdd1], outtt)"
      ],
      "execution_count": 132,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "-o2BqQPMa0Oj",
        "outputId": "48e8201f-559d-457d-e28c-83915f848b7c"
      },
      "source": [
        "sampler.predict([np.array([-10.]), np.array([8.])])"
      ],
      "execution_count": 196,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[418.57117]], dtype=float32)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 196
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "PqmPCgTnbwFf"
      },
      "source": [
        "# KL y capas custom"
      ],
      "execution_count": 197,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "vYqzfOV6cmLa"
      },
      "source": [
        "from keras.layers import Layer"
      ],
      "execution_count": 198,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "S7Hln5tydiwX"
      },
      "source": [
        "class KL(Layer):\n",
        "  def __init__(self, kl_weight=1):\n",
        "    super(KL, self).__init__()\n",
        "    self.kl_weight = kl_weight\n",
        "\n",
        "  def call(self, inputs):\n",
        "    mu, log_std = inputs\n",
        "    kl = -0.5 * self.kl_weight * tf.reduce_sum(1. + 2. * log_std - tf.square(mu) - tf.exp(2. * log_std), axis=-1)\n",
        "    self.add_loss(tf.reduce_mean(kl))\n",
        "    return [mu, log_std]\n"
      ],
      "execution_count": 208,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "AT2IC7T1fJrH"
      },
      "source": [
        "muuu1 = Input(shape=(1,))\n",
        "logstdd1 = Input(shape=(1,))\n",
        "outtt = KL()([muuu1, logstdd1])\n",
        "\n",
        "klmodell = Model([muuu1, logstdd1], outtt)"
      ],
      "execution_count": 209,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "2ji9BEcUg3QA",
        "outputId": "556358de-eb01-40e7-92bb-bb29805b2970"
      },
      "source": [
        "klmodell.summary()"
      ],
      "execution_count": 210,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Model: \"model_8\"\n",
            "__________________________________________________________________________________________________\n",
            "Layer (type)                    Output Shape         Param #     Connected to                     \n",
            "==================================================================================================\n",
            "input_20 (InputLayer)           [(None, 1)]          0                                            \n",
            "__________________________________________________________________________________________________\n",
            "input_21 (InputLayer)           [(None, 1)]          0                                            \n",
            "__________________________________________________________________________________________________\n",
            "kl_1 (KL)                       [(None, 1), (None, 1 0           input_20[0][0]                   \n",
            "                                                                 input_21[0][0]                   \n",
            "==================================================================================================\n",
            "Total params: 0\n",
            "Trainable params: 0\n",
            "Non-trainable params: 0\n",
            "__________________________________________________________________________________________________\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "kN4iCXVng7X0",
        "outputId": "dbb1a85a-2a15-46d3-e8a4-0118e4c58fb6"
      },
      "source": [
        "klmodell.predict([np.array([1.]), np.array([1.])])"
      ],
      "execution_count": 213,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[array([[1.]], dtype=float32), array([[1.]], dtype=float32)]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 213
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Gr5Re2vmiOwl"
      },
      "source": [
        "klmodell.compile(optimizer=\"adam\", loss=None)"
      ],
      "execution_count": 219,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "9oGPnAa1hxmY",
        "outputId": "7fb249d9-fc23-4641-997d-c09f60142be5"
      },
      "source": [
        "klmodell.test_on_batch([np.array([0.]), np.array([9.])])"
      ],
      "execution_count": 225,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "32829976.0"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 225
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "XySwLypgh-GM"
      },
      "source": [
        "# montar nuestro autoencoder"
      ],
      "execution_count": 226,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "tQUGaRRpjUJP"
      },
      "source": [
        "decoder = Sequential([\n",
        "                      Dense(h_dim, \"relu\", input_shape=(z_dim,)),\n",
        "                      Dense(28*28, \"tanh\"),\n",
        "                      Reshape((28,28)),\n",
        "])"
      ],
      "execution_count": 255,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "SvF5IXHPi2Qq"
      },
      "source": [
        "# encoder\n",
        "\n",
        "encoder_head = Sequential([\n",
        "                           Flatten(input_shape=(28,28)),\n",
        "                           Dense(h_dim, \"relu\"),\n",
        "])"
      ],
      "execution_count": 256,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "6ENOpQxbi2Qr"
      },
      "source": [
        "from keras.layers import Input\n",
        "from keras.models import Model"
      ],
      "execution_count": 257,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "uCwwuLBxi2Qr"
      },
      "source": [
        "inp = Input(shape=(28,28))\n",
        "h = encoder_head(inp)\n",
        "\n",
        "mu = Dense(z_dim)(h)\n",
        "log_std = Dense(z_dim)(h)"
      ],
      "execution_count": 258,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "es0Yg6PYi53O"
      },
      "source": [
        "# aplicamos kl\n",
        "mu1, log_std1 = KL()([mu, log_std])\n",
        "\n",
        "# aplicamos sampling\n",
        "z = Lambda(sample)([mu1, log_std1]) # también Sample([..])\n",
        "\n",
        "out = decoder(z)\n"
      ],
      "execution_count": 259,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "NU-ByQGRjrKT"
      },
      "source": [
        "vae = Model(inp, out)"
      ],
      "execution_count": 260,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ffXCh-d8ju4c",
        "outputId": "9a5ce395-62f7-4b4e-db98-17c26f3a2cfb"
      },
      "source": [
        "vae.summary()"
      ],
      "execution_count": 261,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Model: \"model_12\"\n",
            "__________________________________________________________________________________________________\n",
            "Layer (type)                    Output Shape         Param #     Connected to                     \n",
            "==================================================================================================\n",
            "input_24 (InputLayer)           [(None, 28, 28)]     0                                            \n",
            "__________________________________________________________________________________________________\n",
            "sequential_25 (Sequential)      (None, 100)          78500       input_24[0][0]                   \n",
            "__________________________________________________________________________________________________\n",
            "dense_57 (Dense)                (None, 10)           1010        sequential_25[0][0]              \n",
            "__________________________________________________________________________________________________\n",
            "dense_58 (Dense)                (None, 10)           1010        sequential_25[0][0]              \n",
            "__________________________________________________________________________________________________\n",
            "kl_3 (KL)                       [(None, 10), (None,  0           dense_57[0][0]                   \n",
            "                                                                 dense_58[0][0]                   \n",
            "__________________________________________________________________________________________________\n",
            "lambda_4 (Lambda)               (None, 10)           0           kl_3[0][0]                       \n",
            "                                                                 kl_3[0][1]                       \n",
            "__________________________________________________________________________________________________\n",
            "sequential_24 (Sequential)      (None, 28, 28)       80284       lambda_4[0][0]                   \n",
            "==================================================================================================\n",
            "Total params: 160,804\n",
            "Trainable params: 160,804\n",
            "Non-trainable params: 0\n",
            "__________________________________________________________________________________________________\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 644
        },
        "id": "-jaop7htjv6f",
        "outputId": "99f650aa-c922-4993-94f2-b3a95130c90f"
      },
      "source": [
        "from tensorflow.keras.utils import plot_model\n",
        "plot_model(vae, show_shapes=True, show_layer_names=True)"
      ],
      "execution_count": 262,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<IPython.core.display.Image object>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 262
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "suDF0PXpj3xR"
      },
      "source": [
        "encoder_mean = Model(inp, mu) # útil para codificar pero no se usa en el entrenamiento"
      ],
      "execution_count": 263,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 282
        },
        "id": "v-4kpZt4kIpJ",
        "outputId": "7bbdb7ac-c2da-41aa-f29f-f60a8bb38c00"
      },
      "source": [
        "plt.imshow( vae.predict(x_train[2:3])[0] )"
      ],
      "execution_count": 264,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.image.AxesImage at 0x7f7c9c690850>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 264
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAPsAAAD4CAYAAAAq5pAIAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4yLjIsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+WH4yJAAAZoUlEQVR4nO2de3CV1dXGnwVyJ6ZIuESIcgu0iIAaFcV+wKgFLCMqrUJnLLTWyFjtR4V6qReoHSviBZ1RGFAYBC8MihdqvaFgkVKRgCh3gxALgSQg9wJy298fOfRDzX52TMI5Z7qf3wyT5PyycnbenMU5513vXsuccxBC/PdTK9ULEEIkByW7EJGgZBciEpTsQkSCkl2ISDglmXeWkZHhmjVr5vU7duyg8Sx2586dNLZly5bUr127lvratWt7XevWrWns119/XS1vZtQfOXLE65o2bUpjDx8+TH3obxL63bdv3+517JgCQK1a/LmorKyM+oyMDK87evQojc3MzKS+bt261IeO2+mnn+51e/furfLPPnjwIA4fPlzhA6ZayW5m/QA8AaA2gGecc2PZ9zdr1gz333+/18+aNYveX35+vte99NJLNPauu+6ivmfPntSfeuqpXjd2LP21UVRURH1hYSH1oQcWe9D/8pe/rHIsADz33HPUjxs3jvqpU6d6HTumANC4cWPqn3zySer79Onjdbt27aKxP/3pT6kP/Sf3/PPPU8/yYMGCBTR25syZXldQUOB1VX4Zb2a1ATwFoD+AzgCGmFnnqv48IcTJpTrv2S8AsN45t8E5dwjATAADa2ZZQoiapjrJ3grAphO+3py47RuYWb6ZFZhZwZ49e6pxd0KI6nDSz8Y75yY75/Kcc3mh92hCiJNHdZK9GEDOCV+3TtwmhEhDqpPsSwDkmllbM6sLYDCAOTWzLCFETWPV2fVmZlcAeBzlpbepzrkH2PdnZGS47t27e33v3r3p/bFyCavBA8C+ffuoD9WjWa27efPmNPaUU3iFc9OmTdRv2LCB+qysLK8LvXVatWoV9Zdddlm14l955RWvy87OprG5ubnUd+rUifquXbt63aFDh2jsnDn8eWvAgAHUv/nmm9T36NHD6y699FIaO2HCBK+bMWMGSkpKar7O7px7EwD/rYQQaYEulxUiEpTsQkSCkl2ISFCyCxEJSnYhIkHJLkQkVKvO/n1p2bKlu/76672e7csG+BZXtmUQCO8JD9Vdb7jhBq/LycnxOgD4/e9/T323bt2oLy0tpb5BgwZeF7oG4IsvvqD+2muvpT5Ujz527JjXXXfddTR22rRp1Id6GLDjWlzML/YM7fMPPVY7duxIPduK2qZNGxr7ySefeN26deuwf//+Ch/semYXIhKU7EJEgpJdiEhQsgsRCUp2ISJByS5EJCS1lXT9+vXRubO/J+V9991H488++2yvC5UrWrX6TsesbxDqFrpo0SKvC3WHbdGiBfUjR46k/vXXX6f+s88+87qGDRvS2EGDBlG/ZMkS6nfv3k39GWec4XVbt26lsaHj8o9//IP6/fv3e93ixYtp7JVXXkn9eeedRz3rAAsAq1ev9roHHqA7xfHQQw953caNG71Oz+xCRIKSXYhIULILEQlKdiEiQckuRCQo2YWIBCW7EJGQ1Dr7jh07MGPGDK//xS9+QeNZa+FQy+S5c+dS//nnn1P/2muved3kyZNpbKhl8s9//nPqWY0fAJ544gmvW7NmDY0NTRsNbUMNtZJm1xiE7vv888+nvlGjRtQPGTLE60KTcUN88MEH1IeOW5MmTbxu6dKlNJZt7WWjqPXMLkQkKNmFiAQluxCRoGQXIhKU7EJEgpJdiEhQsgsRCUmtszdv3hy33nqr1y9btozGs33j69evp7Hz5s2jvl+/ftSzcdKhGv306dOpf/zxx6kP1fHr1KnjdUVFRTR21KhR1D/66KPUDx8+nHq2371du3Y09quvvqI+1O65V69eXnfmmWfS2MzMTOr79u1Lfei4s7WH8oDdN8uDaiW7mRUB2AvgKIAjzrm86vw8IcTJoyae2fs457bXwM8RQpxE9J5diEiobrI7AO+a2VIzq3A2k5nlm1mBmRXs2bOnmncnhKgq1X0Zf4lzrtjMmgOYa2ZrnXMLTvwG59xkAJMBoEOHDskbLCeE+AbVemZ3zhUnPpYBeBXABTWxKCFEzVPlZDezRmaWcfxzAD8BsLKmFiaEqFmqPLLZzNqh/NkcKH878IJzjja8zsrKcgMGDPD6H/3oR/Q+2d7sTz/9lMYOGzaM+lBts23btl730Ucf0dgRI0ZQ/8wzz1DP+p8DQF6ev+IZ6mkf6gMQ+pvUqsWfLw4ePOh1e/fupbGhscqhff4/+9nPvC5UJ3/wwQepD41sZv3bAX6NQZ8+fWjsaaed5nUPPPAAvvzyywpHNlf5PbtzbgMAPlhcCJE2qPQmRCQo2YWIBCW7EJGgZBciEpTsQkRCUre4HjlyhLbBbd68OY0fPXq0102cOJHGXnPNNdSHyl+sZJiVlUVjWakEAHJycqjft28f9az8NXToUBo7YcIE6lk7ZoCPiwZ4WfKiiy6isaFtqGzbMQB8/PHHXhfaujtu3DjqJ02aRH1o5POuXbu8LlRqZePH2WNBz+xCRIKSXYhIULILEQlKdiEiQckuRCQo2YWIBCW7EJFQ5S2uVaFTp06O1cMfeeQRGs9GOoe2coZqtqH4t956y+sGDRpEY8vKyqg/44wzqA9tBf3b3/7mdaHfOzTSObTFddu2bdSz0cSNGzemsYcOHaJ+zJgx1C9ZssTrQtcubNq0ifrt23mP1VALtp49e3rdsWPHaOzatWu97rXXXsO2bdsq3OKqZ3YhIkHJLkQkKNmFiAQluxCRoGQXIhKU7EJEgpJdiEhIap29Vq1arn79+l4fat/L2kVv2LCBxob2Xbdo0YL6Ll26eF3Lli1pLBtbDAA9evSgvjr72WvXrk1jv/76a+pD1wiE9uo3aNDA62666SYam59f4USx/xD6m7FR2XXr1qWxof3soesTWrduTT27hqBp06Y0dvPmzV731FNPYfPmzaqzCxEzSnYhIkHJLkQkKNmFiAQluxCRoGQXIhKU7EJEQlLr7K1atXLDhw/3+tDYZFazDe19DtWD27dvT/2///1vr2PjdwFg4cKF1Ldp04Z69nsDvAd5aDTxH/7wB+r/8pe/UD9v3rwq+44dO9LYUB09NIab9foP9dNfv3499aGe9aH98P/85z+9LjSyme2lnz59OkpKSqpWZzezqWZWZmYrT7jtNDOba2aFiY/+DgVCiLSgMi/jpwHo963b7gTwvnMuF8D7ia+FEGlMMNmdcwsA7PjWzQMBPJv4/FkAV9XwuoQQNUxVT9C1cM5tTXxeAsD75srM8s2swMwK2PteIcTJpdpn4135GT7vWT7n3GTnXJ5zLq9Ro0bVvTshRBWparKXmlk2ACQ+8q1RQoiUU9VknwPgeO1iKIDXa2Y5QoiTRXA+u5m9CKA3gCwz2wxgNICxAGaZ2Q0AvgRwbWXubN++fbS+eNlll9F4Nr89dD5g8eLF1L/xxhvUs73Xf/3rX2ns1VdfTf2UKVOoD80S79Wrl9eVlJTQWNbXHQBCb72Ki4upv+oq/7nbUE/6AwcOUH/XXXdRP3LkyCqtCwBefPFF6kN7zkNzCPr37+91ocdyVlaW151yij+lg8nunBviUZeGYoUQ6YMulxUiEpTsQkSCkl2ISFCyCxEJSnYhIiGpW1yzsrLclVde6fWhlswrVqzwuvPPP5/GsnbLQPmoW0ZOTo7XjRgxgsYuWLCA+lDb4VDbYtYWma0bCI8Wnjp1KvVdu3alfvny5V4XKr2F2j137tyZ+gsuuMDrnnzySRp78cUXU//RRx9R/+tf/5r6l19+2esOHjxIY1lJctGiRdi9e7daSQsRM0p2ISJByS5EJCjZhYgEJbsQkaBkFyISlOxCREJw11tNcvToUdr2mG3PAwCzCsuHAMK1yVBNNtTOOTc31+vGjx9PYwcPHkz97bffTv0VV1xBPds2HPq9zzvvPOpvvvlm6hctWkQ9W3toXHS9evWo79fv231Qv8mtt97qdWx0eGU822YKAO+99x717LG+ZcsWGvurX/3K61avXu11emYXIhKU7EJEgpJdiEhQsgsRCUp2ISJByS5EJCjZhYiEpNbZ69WrR+vV11xzDY2fNm2a161du5bGhvbK5+XlUb97926vYyN0AeDdd9+l/uGHH6Z+0qRJ1N92221eF9q3HarDl5aWUn/33XdTP3v2bK8L9VII1bqLioqoZy28d+7cSWNDLbTbtm1LfWjc9DPPPON1ocdiWZl/JsuRI0e8Ts/sQkSCkl2ISFCyCxEJSnYhIkHJLkQkKNmFiAQluxCRkNQ6e61atdCgQQOvnz9/Po2/7rrrvO7VV1+lsTNmzKA+Pz+f+o4dO3rdpk2baGxoPHCo531o3DSrGYfq4BkZGdQ3bNiQ+vvuu496du1EZmYmjR03bhz1bF83AKxfv97rQr/39OnTqQ/Vwnv27En9sGHDvC40LprV0g8dOuR1wWd2M5tqZmVmtvKE28aYWbGZLU/8490VhBAppzIv46cBqKglyHjnXPfEvzdrdllCiJommOzOuQUAdiRhLUKIk0h1TtDdYmafJV7mN/F9k5nlm1mBmRXs37+/GncnhKgOVU32iQDaA+gOYCuAR33f6Jyb7JzLc87lhU72CCFOHlVKdudcqXPuqHPuGICnAfjHZQoh0oIqJbuZZZ/w5dUAVvq+VwiRHgTr7Gb2IoDeALLMbDOA0QB6m1l3AA5AEYCbKnNnpaWltMf6vffeS+PZ3uzQvmw2Fx4I909ns+HZtQMAn1EOhOe3Z2dnU3/s2DGvC/U3/+STT6hv1qwZ9aF69ahRo7zukUceobFNmnhPBQEA6tSpQz2ba8+u2QDCv9e5555LPavxA8Dll1/udXPnzqWx3bt39zrWOyGY7M65IRXcPCUUJ4RIL3S5rBCRoGQXIhKU7EJEgpJdiEhQsgsRCRZq51uT1K9f37Vu3drrQ+2eb7nlFq97++23aewll1xC/SuvvEI9G11cWFhIY9955x3q+/TpQ31o6y/bfhsqrd1xxx3U/+AHP6A+1Eab3X9OTg6NXbZsGfXt27en/sCBA17HRhsD4VLtQw89RP3TTz9N/aOPei86xcCBA2ksK6/NmTMH27dvr3C2uZ7ZhYgEJbsQkaBkFyISlOxCRIKSXYhIULILEQlKdiEiIal19szMTMda7F544YU0fsuWLV53+PBhGrtr1y7qf/Ob31D/4IMPel2oJvvUU09RP2RIRRsL/58PP/yQ+rPPPtvrmjZtSmPZ1l0g3BI5NPq4U6dOXvfGG2/Q2IkTJ1L/2GOPUX/qqad6XWjbcGgE+J49e6gPPR7Z9lw21hwA9u7d63WTJk1CcXGx6uxCxIySXYhIULILEQlKdiEiQckuRCQo2YWIBCW7EJGQ1JHNDRs2pG1wQ7VNtq/7nnvuobGhevP9999PPatlh/ZGX3zxxdTPmTOH+g4dOlDP2mDXqsX/P//888+p/+CDD6hfuZKPDOjRo4fXlZaW0tjQcQ3VsuvVq+d1n376KY1lLc8B/ngAwo/HP//5z15Xt25dGstal7O24npmFyISlOxCRIKSXYhIULILEQlKdiEiQckuRCQo2YWIhKTuZ+/SpYt7+eWXvT6073vfvn1ed+mll9LYjRs3Us/2PgNA165dvS40njc00nnr1q3Vij/lFP/lEmzvMwB88cUX1C9evJj6UK2b9XYPXQPA/t4AUFRURD2rhYd61u/YsYP6H//4x9SHrhFgI6OXLl1KY+fNm+d18+fPx86dO6u2n93McsxsvpmtNrNVZva/idtPM7O5ZlaY+MiHaQshUkplXsYfATDSOdcZQA8AvzWzzgDuBPC+cy4XwPuJr4UQaUow2Z1zW51zyxKf7wWwBkArAAMBPJv4tmcBXHWyFimEqD7f6wSdmbUBcA6AxQBaOOeOv9ksAdDCE5NvZgVmVhDqVyaEOHlUOtnNrDGA2QBGOOe+0W3PlZ/lq/BMn3NusnMuzzmX16SJ3tYLkSoqlexmVgflif68c+74uNNSM8tO+GwAZSdniUKImiC4xdXMDMAUAGuccyf27p0DYCiAsYmPr4d+VmFhIfr37+/1+fn5NH7dunVeF9ouOXToUOpvu+026l966SWv69u3L40NjWQ+ePAg9aEyDhurvHnzZhobGns8YMAA6letWkV9q1atvC5Uaj3rrLOoDx03VtJs06YNjR00aBD1oTbYP/zhD6lnJct//etfNJY9ngoKCryuMvvZewK4HsAKM1ueuO2PKE/yWWZ2A4AvAVxbiZ8lhEgRwWR3zi0EUGGRHgC/kkUIkTboclkhIkHJLkQkKNmFiAQluxCRoGQXIhKS2kq6cePGuOiii7w+NFa5RYsKr8itVGyoVh2qux46dMjrWItrAMjMzKS+rIxfjxSqu7J69IgRI2js2LFjqf/444+pv/nmm6m/807//ijW9hgA8vLyqGfXF4R+/o033khj16xZQ/327dup37BhA/XdunXzut69e9PYBQsWeB2r3+uZXYhIULILEQlKdiEiQckuRCQo2YWIBCW7EJGgZBciEpLaSjozM9OxEb69evWi8QsXLvS6wsJCGrts2TLqn3vuOeqXL1/udRdeeCGNDbWpbt26NfVXXcXb+7G9+KHrB0J7wktKSqjfs2cP9V999VWV73v37t3Uh9pkjx492uvuvvtuGjtq1CjqQ9dtZGdnUz9lyhSvYyO4AX5dx7p167B///6qtZIWQvx3oGQXIhKU7EJEgpJdiEhQsgsRCUp2ISJByS5EJCS1zp6bm+vGjx/v9dOnT6fx55xzjtd17NiRxn744YfUs3pw6OeHatkTJkyg/qabbqI+RJcuXbzurbfeorGhvfRnnnkm9aH+6Kw3fIcOHWhs6G/SqVMn6tm1FaHfa/DgwdRPnDiR+tAI8b///e9eFxpVzXoIDB8+HOvWrVOdXYiYUbILEQlKdiEiQckuRCQo2YWIBCW7EJGgZBciEioznz0HwHQALQA4AJOdc0+Y2RgANwLYlvjWPzrn3mQ/6/Dhw9i2bZvXd+3ala5l//79Xsd6aQPhvc+hOeU9e/b0unfeeYfGhmrRW7ZsoT50DQGbwd6kSRMaG6rxv/DCC9Q3bdqU+rffftvr/vSnP9HYUB396NGj1I8ZM8brVqxYQWPvuece6g8cOEC9mW/wcTns2ojmzZvT2NzcXK+rV6+e11VmSMQRACOdc8vMLAPAUjObm3DjnXOPVOJnCCFSTGXms28FsDXx+V4zWwOg1clemBCiZvle79nNrA2AcwAsTtx0i5l9ZmZTzazC14tmlm9mBWZWELoMUAhx8qh0sptZYwCzAYxwzu0BMBFAewDdUf7M/2hFcc65yc65POdcXuPGjWtgyUKIqlCpZDezOihP9Oedc68AgHOu1Dl31Dl3DMDTAC44ecsUQlSXYLJb+WnFKQDWOOceO+H2E9tnXg1gZc0vTwhRU1TmbHxPANcDWGFmx/sp/xHAEDPrjvJyXBGA4D7N0Mjm22+/ncYPGzbM68aNG0djQ6OLZ8+eTT1rBx0ayXz66adTv3PnTupDbYtZG+1QiSjUYjvUKjp0HqZv375eF/q9165dS30oPiMjw+tCbapDZcHQ3yQ0jpq1mm7QoAGNHTlypNexMmxlzsYvBFBR0ZDW1IUQ6YWuoBMiEpTsQkSCkl2ISFCyCxEJSnYhIkHJLkQkVKbOXmNs27aNtlU+66yzaPzMmTO9rl27djQ2tAU2VHdltfRQHT3UapqN4AWASZMmUc/aGs+aNYvGsm3DQHjt3bp1o54d11CdvHPnztSzEd4A3yq6ceNGGvu73/2O+nvvvZf6hx9+mPqhQ4d6XZ06dWhs7dq1vY5trdUzuxCRoGQXIhKU7EJEgpJdiEhQsgsRCUp2ISJByS5EJCR1ZLOZbQPw5Qk3ZQHYnrQFfD/SdW3pui5Aa6sqNbm2M51zzSoSSU3279y5WYFzLi9lCyCk69rSdV2A1lZVkrU2vYwXIhKU7EJEQqqTfXKK75+RrmtL13UBWltVScraUvqeXQiRPFL9zC6ESBJKdiEiISXJbmb9zGydma03sztTsQYfZlZkZivMbLmZFaR4LVPNrMzMVp5w22lmNtfMChMf+Uzm5K5tjJkVJ47dcjO7IkVryzGz+Wa22sxWmdn/Jm5P6bEj60rKcUv6e3Yzqw3gcwCXA9gMYAmAIc453nU/SZhZEYA851zKL8Aws/8BsA/AdOdcl8Rt4wDscM6NTfxH2cQ5d0earG0MgH2pHuOdmFaUfeKYcQBXARiGFB47sq5rkYTjlopn9gsArHfObXDOHQIwE8DAFKwj7XHOLQCw41s3DwTwbOLzZ1H+YEk6nrWlBc65rc65ZYnP9wI4PmY8pceOrCsppCLZWwHYdMLXm5Fe894dgHfNbKmZ5ad6MRXQwjm3NfF5CYAWqVxMBQTHeCeTb40ZT5tjV5Xx59VFJ+i+yyXOuXMB9Afw28TL1bTElb8HS6faaaXGeCeLCsaM/4dUHruqjj+vLqlI9mIAOSd83TpxW1rgnCtOfCwD8CrSbxR16fEJuomPZSlez39IpzHeFY0ZRxocu1SOP09Fsi8BkGtmbc2sLoDBAOakYB3fwcwaJU6cwMwaAfgJ0m8U9RwAx1uTDgXwegrX8g3SZYy3b8w4UnzsUj7+3DmX9H8ArkD5GfkvANydijV41tUOwKeJf6tSvTYAL6L8Zd1hlJ/buAFAUwDvAygE8B6A09JobTMArADwGcoTKztFa7sE5S/RPwOwPPHvilQfO7KupBw3XS4rRCToBJ0QkaBkFyISlOxCRIKSXYhIULILEQlKdiEiQckuRCT8HwY7oMAU3OemAAAAAElFTkSuQmCC\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ZSnwjX94mSQq"
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "KEaV9cnRkZZC"
      },
      "source": [
        "# compilamos y entrenamos\n",
        "from keras.losses import mse\n",
        "\n",
        "vae.compile(\"adam\", loss = lambda x, y: 28 * 28 * mse(x,y)) # corregimos para que el error de reconstrucción sea de la imagen y no de pixel. (512, 28, 28) hace la media en las otras dos también."
      ],
      "execution_count": 265,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "piehb-y1lxZs",
        "outputId": "de4133f9-375e-413f-bf87-26bf141ddb25"
      },
      "source": [
        "history = vae.fit(x_train, x_train, batch_size=512, epochs=80, validation_data=(x_test, x_test))"
      ],
      "execution_count": 266,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Epoch 1/80\n",
            "118/118 [==============================] - 2s 8ms/step - loss: 319.1763 - val_loss: 122.1595\n",
            "Epoch 2/80\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 114.1393 - val_loss: 99.7874\n",
            "Epoch 3/80\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 97.1977 - val_loss: 91.2365\n",
            "Epoch 4/80\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 89.7429 - val_loss: 86.6970\n",
            "Epoch 5/80\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 85.5829 - val_loss: 83.7479\n",
            "Epoch 6/80\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 83.0869 - val_loss: 81.6070\n",
            "Epoch 7/80\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 80.9508 - val_loss: 79.8369\n",
            "Epoch 8/80\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 79.5933 - val_loss: 78.5788\n",
            "Epoch 9/80\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 78.2555 - val_loss: 77.6956\n",
            "Epoch 10/80\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 76.8604 - val_loss: 76.7850\n",
            "Epoch 11/80\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 76.2116 - val_loss: 76.2654\n",
            "Epoch 12/80\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 75.2936 - val_loss: 75.2399\n",
            "Epoch 13/80\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 74.9522 - val_loss: 74.8474\n",
            "Epoch 14/80\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 74.2750 - val_loss: 74.1843\n",
            "Epoch 15/80\n",
            "118/118 [==============================] - 1s 6ms/step - loss: 73.9497 - val_loss: 73.7332\n",
            "Epoch 16/80\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 73.1820 - val_loss: 73.7160\n",
            "Epoch 17/80\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 72.9185 - val_loss: 73.1214\n",
            "Epoch 18/80\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 72.4434 - val_loss: 72.6479\n",
            "Epoch 19/80\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 71.9455 - val_loss: 72.2710\n",
            "Epoch 20/80\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 71.9375 - val_loss: 72.0356\n",
            "Epoch 21/80\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 71.5886 - val_loss: 71.7101\n",
            "Epoch 22/80\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 71.1096 - val_loss: 71.4917\n",
            "Epoch 23/80\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 71.0848 - val_loss: 71.5562\n",
            "Epoch 24/80\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 70.6676 - val_loss: 71.1111\n",
            "Epoch 25/80\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 70.5318 - val_loss: 70.9698\n",
            "Epoch 26/80\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 70.1609 - val_loss: 70.7326\n",
            "Epoch 27/80\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 70.1274 - val_loss: 70.9244\n",
            "Epoch 28/80\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 69.7546 - val_loss: 70.3853\n",
            "Epoch 29/80\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 69.5635 - val_loss: 70.5389\n",
            "Epoch 30/80\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 69.5451 - val_loss: 70.2694\n",
            "Epoch 31/80\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 69.5079 - val_loss: 70.0646\n",
            "Epoch 32/80\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 69.1790 - val_loss: 69.9001\n",
            "Epoch 33/80\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 69.1272 - val_loss: 69.6246\n",
            "Epoch 34/80\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 69.0716 - val_loss: 69.5698\n",
            "Epoch 35/80\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 68.9049 - val_loss: 69.3604\n",
            "Epoch 36/80\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 68.7855 - val_loss: 69.3242\n",
            "Epoch 37/80\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 68.6516 - val_loss: 69.1022\n",
            "Epoch 38/80\n",
            "118/118 [==============================] - 1s 6ms/step - loss: 68.6436 - val_loss: 69.0439\n",
            "Epoch 39/80\n",
            "118/118 [==============================] - 1s 6ms/step - loss: 68.4502 - val_loss: 69.3408\n",
            "Epoch 40/80\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 68.1667 - val_loss: 68.9063\n",
            "Epoch 41/80\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 68.2998 - val_loss: 68.7221\n",
            "Epoch 42/80\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 67.9669 - val_loss: 68.7487\n",
            "Epoch 43/80\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 68.0209 - val_loss: 68.4170\n",
            "Epoch 44/80\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 67.8294 - val_loss: 68.8097\n",
            "Epoch 45/80\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 67.9852 - val_loss: 68.5260\n",
            "Epoch 46/80\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 67.5719 - val_loss: 68.3962\n",
            "Epoch 47/80\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 67.5184 - val_loss: 68.1789\n",
            "Epoch 48/80\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 67.7430 - val_loss: 68.3702\n",
            "Epoch 49/80\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 67.5753 - val_loss: 68.0008\n",
            "Epoch 50/80\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 67.3958 - val_loss: 68.0641\n",
            "Epoch 51/80\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 67.4922 - val_loss: 68.0998\n",
            "Epoch 52/80\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 67.3406 - val_loss: 68.0179\n",
            "Epoch 53/80\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 67.1074 - val_loss: 67.7359\n",
            "Epoch 54/80\n",
            "118/118 [==============================] - 1s 6ms/step - loss: 67.1514 - val_loss: 67.6644\n",
            "Epoch 55/80\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 67.2033 - val_loss: 67.9405\n",
            "Epoch 56/80\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 66.9986 - val_loss: 67.9474\n",
            "Epoch 57/80\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 67.0713 - val_loss: 67.7421\n",
            "Epoch 58/80\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 66.8815 - val_loss: 67.4429\n",
            "Epoch 59/80\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 66.9856 - val_loss: 67.5499\n",
            "Epoch 60/80\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 66.9294 - val_loss: 67.3836\n",
            "Epoch 61/80\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 66.7335 - val_loss: 67.4431\n",
            "Epoch 62/80\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 66.7247 - val_loss: 67.3790\n",
            "Epoch 63/80\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 66.6697 - val_loss: 67.3582\n",
            "Epoch 64/80\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 66.6717 - val_loss: 67.2867\n",
            "Epoch 65/80\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 66.4917 - val_loss: 67.6821\n",
            "Epoch 66/80\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 66.7677 - val_loss: 67.2629\n",
            "Epoch 67/80\n",
            "118/118 [==============================] - 1s 6ms/step - loss: 66.4126 - val_loss: 67.2156\n",
            "Epoch 68/80\n",
            "118/118 [==============================] - 1s 6ms/step - loss: 66.4477 - val_loss: 67.2788\n",
            "Epoch 69/80\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 66.7520 - val_loss: 67.0652\n",
            "Epoch 70/80\n",
            "118/118 [==============================] - 1s 6ms/step - loss: 66.4060 - val_loss: 66.9504\n",
            "Epoch 71/80\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 66.0384 - val_loss: 67.2153\n",
            "Epoch 72/80\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 66.3742 - val_loss: 66.7868\n",
            "Epoch 73/80\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 66.1373 - val_loss: 66.9395\n",
            "Epoch 74/80\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 66.2896 - val_loss: 66.7513\n",
            "Epoch 75/80\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 66.1848 - val_loss: 66.7141\n",
            "Epoch 76/80\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 66.1625 - val_loss: 66.8370\n",
            "Epoch 77/80\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 66.0409 - val_loss: 66.7708\n",
            "Epoch 78/80\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 66.1341 - val_loss: 66.9689\n",
            "Epoch 79/80\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 66.1815 - val_loss: 66.6776\n",
            "Epoch 80/80\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 65.9370 - val_loss: 66.6528\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 282
        },
        "id": "PAjEpLvjl7Fs",
        "outputId": "2589f044-a76c-4289-e0f1-72a9b3c3283c"
      },
      "source": [
        "plt.imshow(x_test[51])"
      ],
      "execution_count": 278,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.image.AxesImage at 0x7f7c96a0e3d0>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 278
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 282
        },
        "id": "AUoiNdWampby",
        "outputId": "2a037b88-8429-4068-fff9-53d6cc2fd2eb"
      },
      "source": [
        "plt.imshow( vae.predict(x_test[51:52])[0] )"
      ],
      "execution_count": 288,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.image.AxesImage at 0x7f7c955effd0>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 288
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "9pJ9nCU4m4e2"
      },
      "source": [
        "# generar datos"
      ],
      "execution_count": 289,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 282
        },
        "id": "338ybK9DnDrY",
        "outputId": "c65dc035-a8f8-46aa-a4e1-2101463ef804"
      },
      "source": [
        "z_test = np.random.randn(1, z_dim)\n",
        "x_gen = decoder.predict(z_test)\n",
        "plt.imshow(x_gen[0])"
      ],
      "execution_count": 314,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.image.AxesImage at 0x7f7c9abdc510>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 314
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ahGlnEoqnNwl",
        "outputId": "97c645b8-ee8a-433f-eb72-8fc3af079820"
      },
      "source": [
        "z_test"
      ],
      "execution_count": 292,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[-0.00980701,  1.02623218, -1.67309723,  0.48400255,  0.55499728,\n",
              "        -1.40484144,  1.57099628,  0.7569925 ,  0.18235008, -0.26921682]])"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 292
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "_rvTQ8ScnQkf"
      },
      "source": [
        "# vae de 2 dimensiones"
      ],
      "execution_count": 315,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "JU_1ZQunnspB"
      },
      "source": [
        "z_dim = 2"
      ],
      "execution_count": 324,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "AmelFIy1n1yl"
      },
      "source": [
        "# montar nuestro autoencoder"
      ],
      "execution_count": 325,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "WV5cTzVHn1yl"
      },
      "source": [
        "decoder2 = Sequential([\n",
        "                      Dense(h_dim, \"relu\", input_shape=(z_dim,)),\n",
        "                      Dense(28*28, \"tanh\"),\n",
        "                      Reshape((28,28)),\n",
        "])"
      ],
      "execution_count": 326,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "_CYLF7wFn1yl"
      },
      "source": [
        "# encoder\n",
        "\n",
        "encoder_head2 = Sequential([\n",
        "                           Flatten(input_shape=(28,28)),\n",
        "                           Dense(h_dim, \"relu\"),\n",
        "])"
      ],
      "execution_count": 327,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "1z8GteQSn1yl"
      },
      "source": [
        "from keras.layers import Input\n",
        "from keras.models import Model"
      ],
      "execution_count": 328,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "UbKwX-JEn1yl"
      },
      "source": [
        "inp2 = Input(shape=(28,28))\n",
        "h2 = encoder_head(inp2)\n",
        "\n",
        "mu2 = Dense(z_dim)(h2)\n",
        "log_std2 = Dense(z_dim)(h2)"
      ],
      "execution_count": 329,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "1Vf9PqlBn1ym"
      },
      "source": [
        "# aplicamos kl\n",
        "mu12, log_std12 = KL()([mu2, log_std2])\n",
        "\n",
        "# aplicamos sampling\n",
        "z2 = Lambda(sample)([mu12, log_std12]) # también Sample([..])\n",
        "\n",
        "out2 = decoder2(z2)\n"
      ],
      "execution_count": 330,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "8KJqc4dVn1ym"
      },
      "source": [
        "vae2 = Model(inp2, out2)"
      ],
      "execution_count": 331,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "SAvQWg8un1yp",
        "outputId": "aaba6740-1c6f-499a-9c23-7ff52f5cce3c"
      },
      "source": [
        "vae2.summary()"
      ],
      "execution_count": 332,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Model: \"model_15\"\n",
            "__________________________________________________________________________________________________\n",
            "Layer (type)                    Output Shape         Param #     Connected to                     \n",
            "==================================================================================================\n",
            "input_26 (InputLayer)           [(None, 28, 28)]     0                                            \n",
            "__________________________________________________________________________________________________\n",
            "sequential_25 (Sequential)      (None, 100)          78500       input_26[0][0]                   \n",
            "__________________________________________________________________________________________________\n",
            "dense_67 (Dense)                (None, 2)            202         sequential_25[2][0]              \n",
            "__________________________________________________________________________________________________\n",
            "dense_68 (Dense)                (None, 2)            202         sequential_25[2][0]              \n",
            "__________________________________________________________________________________________________\n",
            "kl_7 (KL)                       [(None, 2), (None, 2 0           dense_67[0][0]                   \n",
            "                                                                 dense_68[0][0]                   \n",
            "__________________________________________________________________________________________________\n",
            "lambda_8 (Lambda)               (None, 2)            0           kl_7[0][0]                       \n",
            "                                                                 kl_7[0][1]                       \n",
            "__________________________________________________________________________________________________\n",
            "sequential_28 (Sequential)      (None, 28, 28)       79484       lambda_8[0][0]                   \n",
            "==================================================================================================\n",
            "Total params: 158,388\n",
            "Trainable params: 158,388\n",
            "Non-trainable params: 0\n",
            "__________________________________________________________________________________________________\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 644
        },
        "id": "CxxKSOZAn1yp",
        "outputId": "64c57d94-6454-4834-e80d-79d8fef8d510"
      },
      "source": [
        "from tensorflow.keras.utils import plot_model\n",
        "plot_model(vae2, show_shapes=True, show_layer_names=True)"
      ],
      "execution_count": 333,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<IPython.core.display.Image object>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 333
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "TUASo09qn1yq"
      },
      "source": [
        "encoder_mean2 = Model(inp2, mu2) # útil para codificar pero no se usa en el entrenamiento"
      ],
      "execution_count": 334,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 282
        },
        "id": "dF50Z659n1yq",
        "outputId": "609aeb57-8fba-4505-cb5b-30a08f058259"
      },
      "source": [
        "plt.imshow( vae2.predict(x_train[2:3])[0] )"
      ],
      "execution_count": 335,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.image.AxesImage at 0x7f7c9ab21d10>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 335
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "qVEzjgmDn1yq"
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "EevJLhZEn1yq"
      },
      "source": [
        "# compilamos y entrenamos\n",
        "from keras.losses import mse\n",
        "\n",
        "vae2.compile(\"adam\", loss = lambda x, y: 28 * 28 * mse(x,y)) # corregimos para que el error de reconstrucción sea de la imagen y no de pixel. (512, 28, 28) hace la media en las otras dos también."
      ],
      "execution_count": 336,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "AR_Nmw21n1yr",
        "outputId": "974590e1-6d06-46e4-bb61-cc9a48e05510"
      },
      "source": [
        "history = vae2.fit(x_train, x_train, batch_size=512, epochs=80, validation_data=(x_test, x_test))"
      ],
      "execution_count": 338,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Epoch 1/80\n",
            "118/118 [==============================] - 2s 8ms/step - loss: 393.5569 - val_loss: 156.2425\n",
            "Epoch 2/80\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 151.0964 - val_loss: 138.8871\n",
            "Epoch 3/80\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 136.9731 - val_loss: 130.5634\n",
            "Epoch 4/80\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 129.6415 - val_loss: 125.5552\n",
            "Epoch 5/80\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 124.9526 - val_loss: 122.0312\n",
            "Epoch 6/80\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 121.8546 - val_loss: 119.4691\n",
            "Epoch 7/80\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 119.4454 - val_loss: 117.2287\n",
            "Epoch 8/80\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 117.2425 - val_loss: 115.5447\n",
            "Epoch 9/80\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 115.6030 - val_loss: 113.8222\n",
            "Epoch 10/80\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 114.2165 - val_loss: 112.5742\n",
            "Epoch 11/80\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 112.6916 - val_loss: 110.9295\n",
            "Epoch 12/80\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 111.2171 - val_loss: 109.7977\n",
            "Epoch 13/80\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 110.3056 - val_loss: 109.0066\n",
            "Epoch 14/80\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 109.3094 - val_loss: 108.0786\n",
            "Epoch 15/80\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 108.4007 - val_loss: 107.6445\n",
            "Epoch 16/80\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 107.9540 - val_loss: 107.1433\n",
            "Epoch 17/80\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 106.8063 - val_loss: 106.3978\n",
            "Epoch 18/80\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 106.3881 - val_loss: 106.2552\n",
            "Epoch 19/80\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 105.8701 - val_loss: 105.7572\n",
            "Epoch 20/80\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 105.3386 - val_loss: 105.3236\n",
            "Epoch 21/80\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 105.4153 - val_loss: 104.7452\n",
            "Epoch 22/80\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 104.2542 - val_loss: 105.0812\n",
            "Epoch 23/80\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 104.6169 - val_loss: 104.0772\n",
            "Epoch 24/80\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 103.9826 - val_loss: 104.1800\n",
            "Epoch 25/80\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 103.7515 - val_loss: 103.8273\n",
            "Epoch 26/80\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 103.4378 - val_loss: 103.7895\n",
            "Epoch 27/80\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 103.2547 - val_loss: 103.3011\n",
            "Epoch 28/80\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 102.8378 - val_loss: 103.1523\n",
            "Epoch 29/80\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 102.4226 - val_loss: 102.5898\n",
            "Epoch 30/80\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 102.3993 - val_loss: 102.5832\n",
            "Epoch 31/80\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 102.0584 - val_loss: 102.0818\n",
            "Epoch 32/80\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 101.9799 - val_loss: 102.0225\n",
            "Epoch 33/80\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 101.5232 - val_loss: 102.0244\n",
            "Epoch 34/80\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 101.7234 - val_loss: 101.8006\n",
            "Epoch 35/80\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 101.2705 - val_loss: 101.2623\n",
            "Epoch 36/80\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 100.8572 - val_loss: 101.3144\n",
            "Epoch 37/80\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 100.4494 - val_loss: 101.3082\n",
            "Epoch 38/80\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 100.6232 - val_loss: 100.9959\n",
            "Epoch 39/80\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 100.4544 - val_loss: 100.7860\n",
            "Epoch 40/80\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 99.9728 - val_loss: 101.7122\n",
            "Epoch 41/80\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 100.1747 - val_loss: 100.6531\n",
            "Epoch 42/80\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 99.8408 - val_loss: 100.2412\n",
            "Epoch 43/80\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 99.8310 - val_loss: 100.2174\n",
            "Epoch 44/80\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 99.6573 - val_loss: 100.0019\n",
            "Epoch 45/80\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 99.2798 - val_loss: 99.9833\n",
            "Epoch 46/80\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 99.6969 - val_loss: 100.3641\n",
            "Epoch 47/80\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 99.0945 - val_loss: 99.8549\n",
            "Epoch 48/80\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 98.8807 - val_loss: 99.4867\n",
            "Epoch 49/80\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 99.1708 - val_loss: 100.6824\n",
            "Epoch 50/80\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 99.2287 - val_loss: 99.6379\n",
            "Epoch 51/80\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 98.7539 - val_loss: 99.8576\n",
            "Epoch 52/80\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 98.7723 - val_loss: 99.3694\n",
            "Epoch 53/80\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 98.4080 - val_loss: 99.7623\n",
            "Epoch 54/80\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 98.5146 - val_loss: 99.2001\n",
            "Epoch 55/80\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 98.3146 - val_loss: 99.0262\n",
            "Epoch 56/80\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 98.4824 - val_loss: 99.1637\n",
            "Epoch 57/80\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 98.0226 - val_loss: 99.4288\n",
            "Epoch 58/80\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 97.9963 - val_loss: 99.1190\n",
            "Epoch 59/80\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 97.7410 - val_loss: 98.9983\n",
            "Epoch 60/80\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 97.8151 - val_loss: 98.6825\n",
            "Epoch 61/80\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 97.6864 - val_loss: 98.9393\n",
            "Epoch 62/80\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 97.8759 - val_loss: 99.7661\n",
            "Epoch 63/80\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 97.6102 - val_loss: 98.3765\n",
            "Epoch 64/80\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 97.1585 - val_loss: 99.7070\n",
            "Epoch 65/80\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 97.4684 - val_loss: 98.3299\n",
            "Epoch 66/80\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 97.4458 - val_loss: 98.3769\n",
            "Epoch 67/80\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 97.4598 - val_loss: 98.0334\n",
            "Epoch 68/80\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 96.8382 - val_loss: 98.0426\n",
            "Epoch 69/80\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 96.9509 - val_loss: 98.3547\n",
            "Epoch 70/80\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 96.8093 - val_loss: 97.6448\n",
            "Epoch 71/80\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 96.5835 - val_loss: 98.3469\n",
            "Epoch 72/80\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 96.4018 - val_loss: 99.0471\n",
            "Epoch 73/80\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 97.1105 - val_loss: 97.7516\n",
            "Epoch 74/80\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 96.5514 - val_loss: 97.7996\n",
            "Epoch 75/80\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 96.1741 - val_loss: 97.6423\n",
            "Epoch 76/80\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 96.1922 - val_loss: 97.2621\n",
            "Epoch 77/80\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 96.4196 - val_loss: 97.2501\n",
            "Epoch 78/80\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 96.2736 - val_loss: 97.2415\n",
            "Epoch 79/80\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 96.1521 - val_loss: 97.0662\n",
            "Epoch 80/80\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 96.0676 - val_loss: 97.5406\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "yci0x0zsoYjU"
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 282
        },
        "id": "ZqMkn_Ktoutm",
        "outputId": "2f794b92-4c5f-4e2f-abb0-7057cb59d1e9"
      },
      "source": [
        "plt.imshow(x_test[51])"
      ],
      "execution_count": 339,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.image.AxesImage at 0x7f7c9a86b690>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 339
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 282
        },
        "id": "zv42Fdjcoutu",
        "outputId": "d6cccdd2-ff0b-48f1-b0d7-f123d08b5301"
      },
      "source": [
        "plt.imshow( vae2.predict(x_test[51:52])[0] )"
      ],
      "execution_count": 341,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.image.AxesImage at 0x7f7c9a70e690>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 341
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAPsAAAD4CAYAAAAq5pAIAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4yLjIsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+WH4yJAAASqklEQVR4nO3dX2xc9ZUH8O9JyF/HBEPAJGmgpUQIVGlTZEVIRStW1VaUl9AX1DxUWQmt+1CkVurDIvpQHtFq26oPq0rugpquulSVWpQ8oN1mo0qoEooIKIQYuhBCUBOcOGAnsRMnIcnZB99UDvierzO/mbmTnO9HsmzPmTv3zJ05nvGc+/v9zN0hIje+RU0nICLdoWIXSULFLpKEil0kCRW7SBI3dXNnZnZDfvRvZmF80aL4b+rixYvD+JIlS8L4ihUramNLly4Nt7148WIYZ90alntkZmYmjJ87dy6MX7p0KYxfvny5Nsbu1/XcpXL3eZ+QRcVuZo8C+DmAxQD+w92fK7m9TmIFWWLZsmVhfOXKlWH8lltuCeN33nlnGL///vtrY3fddVe47eTkZBj/9NNPwzjLPSrIAwcOhNu+++67YXxiYiKMnz17tjbG/shduHAhjDPs+dbEH5OW38ab2WIA/w7gmwAeALDVzB5oV2Ii0l4l/7NvBnDQ3Q+5+wUAvwWwpT1piUi7lRT7egB/nfP7keqyq5jZsJntNbO9BfsSkUId/4DO3UcAjAA37gd0IteDklf2owA2zPn9C9VlItKDSor9NQAbzexLZrYUwLcB7GxPWiLSbi2/jXf3i2b2FID/wWzr7QV3H21bZteotNXB+tF9fX21scHBwXBb1v5av/5zH3Vc5Z577gnjmzdvro099NBD4basLcjcdFP8FDp48GBtbMeOHeG2t99+exg/duxYGB8fH6+NffTRR+G2rCXJzgHoxT590f/s7v4ygJfblIuIdJBOlxVJQsUukoSKXSQJFbtIEip2kSRU7CJJdHU8eyeV9tGjMeEAcPfdd9fG7r333nBb1i/esGFDGO/v7w/jhw8fro2xfvCDDz4YxtesWRPG9+/fH8bffPPN2hg7N4IdVzbOPzo3gj3e0TEFgI8//jiMs6HBbCx+J+iVXSQJFbtIEip2kSRU7CJJqNhFklCxiyRxw7TeGDbl8cDAQBi/7777amNDQ0PhtjfffHMYZ21DNtwyaiuePHky3HZ0NB6VzIbAvv/++2F8amqqNjY9PR1uy1prGzduDOPRDLGHDh0Kt2W5RfcL4LPXNkGv7CJJqNhFklCxiyShYhdJQsUukoSKXSQJFbtIEj3VZy+ZDnr58uXhtqxny4ZyRr302267LdyWDYc8f/58GGfDVKP7fuLEiaJ9s6HBx48fD+NRr5utlMruN5vGOlphlg2fjaahBoCxsbEwHq0g2xS9soskoWIXSULFLpKEil0kCRW7SBIqdpEkVOwiSfRUn72Ty9yynuy6devCeLQs85kzZ8Jt2dhm1uu+fPlyGI+mLWZTFrPzD9iUyKdOnQrjixbVv55EMYDfb3Zco143m0qanXfBtmfPt+i53qmx8EXFbmaHAUwBuATgorvHsziISGPa8cr+D+4enyImIo3T/+wiSZQWuwP4o5m9bmbD813BzIbNbK+Z7S3cl4gUKH0b/7C7HzWzOwDsMrO/uPsrc6/g7iMARgDAzDr3CZyIhIpe2d39aPV9HMBLADa3IykRab+Wi93M+sys/8rPAL4B4EC7EhOR9ip5Gz8I4KVqDPpNAP7L3f+7LVl1AOsnR2OfgXjMOBu7zPqmpb3uSOlY+WXLloVxNh9/CXbbJcses3H6q1evDuNs/gR2DgGLd0LLxe7uhwD8XRtzEZEOUutNJAkVu0gSKnaRJFTsIkmo2EWS6KkhriXY8FjW3urr6wvj0ZBFtiTzzMxMGGfLA7P2VzQFN7vfrPVWMr032561n1jLkrXPomGorK3HWmtsKWt23CKlQ39rb7elrUTkuqNiF0lCxS6ShIpdJAkVu0gSKnaRJFTsIkncMH12pnRIYzTMlE07zLB+MuurRr1u1rNlffLSJZ1LpgdnvWrWC1+/fn1t7PTp0+G27H6xqaJL+uxMdNvhc6ETyYhI71GxiyShYhdJQsUukoSKXSQJFbtIEip2kSRumD476yeXjH0G4umi2XLPLD42NhbGWc826sOzHn7pVNAl01yzsfYsdzbOPzr/YWpqKtyW9fD7+/vDODuuJcsyq88uIiEVu0gSKnaRJFTsIkmo2EWSULGLJKFiF0nihumzl459XrVqVcv7ZnOIsyWd2TkCJX12hi17zHrZTNT3LRnrDvDjEs3nz54P7ByA0nH8Ue4lj2eEvrKb2QtmNm5mB+ZcdquZ7TKz96rvAx3JTkTaZiFv438F4NHPXPY0gN3uvhHA7up3EelhtNjd/RUAE5+5eAuA7dXP2wE83ua8RKTNWv2ffdDdr5zQfQzAYN0VzWwYwHCL+xGRNin+gM7d3cxqP41w9xEAIwAQXU9EOqvV1ttxM1sLANX38falJCKd0Gqx7wSwrfp5G4Ad7UlHRDqFvo03sxcBPAJgjZkdAfBjAM8B+J2ZPQngQwBPdDLJK6LeJ+tVs3m+WTzqfbKxyxcuXAjjpWugR2PKS+cvZ314Fo9yZ/1kNlaexaPHhZ0bwZ5Ppeu7T09Ph/FOoMXu7ltrQl9vcy4i0kE6XVYkCRW7SBIqdpEkVOwiSajYRZK4roa4Rq0WNkSVtVrYVNLRkEbW3mJDXEtbTFELiw3VZPGS5aKB+Niw9hUbRnru3LkwHrU8Wd4szp4v7L6VDu9thV7ZRZJQsYskoWIXSULFLpKEil0kCRW7SBIqdpEkrqs+e4QNtWR9dtZPjobAsn7v+Hg8twfrubJ+c6tL+ALlyyKz24/6zewxY73q8+fPh/EzZ87Uxtjzge2bndfBHrNIybkLEb2yiyShYhdJQsUukoSKXSQJFbtIEip2kSRU7CJJXFd99mh6XzYVNOubsp5v1Idn/d6pqakwzsaUs9uPjgvro5dOY81Ex610eu+ZmZkwHh33/v7+on2zPj3rs0ePWWNLNovIjUHFLpKEil0kCRW7SBIqdpEkVOwiSajYRZLoep896uuynm/UK2d9dLYEL+ttRr1wljfrB/f19YVxdt8i7H6z3NnSw2xO+5LHm/X42bkR0bLI69atC7dlfXjWR2fzyrPHJdLquQ90j2b2gpmNm9mBOZc9a2ZHzWxf9fVYS3sXka5ZyJ+XXwF4dJ7Lf+bum6qvl9ubloi0Gy12d38FwEQXchGRDir5gO4pM9tfvc0fqLuSmQ2b2V4z21uwLxEp1Gqx/wLAlwFsAjAG4Cd1V3T3EXcfcvehFvclIm3QUrG7+3F3v+TulwH8EsDm9qYlIu3WUrGb2do5v34LwIG664pIb6B9djN7EcAjANaY2REAPwbwiJltAuAADgP47kJ3GPUIWT856nWzviab55vNjx7FWa+Z9dlZ7my8e3RMozXKAd7vZb3skjnO2W2z3Nhxn5io/1yZHRc2BwHDziGInk9sDoLomEcxWuzuvnWei59n24lIb9HpsiJJqNhFklCxiyShYhdJQsUukkRPTSXNhplGrRq2LWvrnT17NoxH7ZATJ04U3TYbTnny5MkwHt131p5ix4W1gdjtR9uXDktmU2xPTk7WxqLlnAHeUmRTTbNWbqRT03vrlV0kCRW7SBIqdpEkVOwiSajYRZJQsYskoWIXSaKn+uwlywOznizri7JhpJFoymKAD+UsjUf9ana/2ZTIpUths154hD2mbNnkc+fO1cbY/Wb3i/XCWTw6N6J0mew6emUXSULFLpKEil0kCRW7SBIqdpEkVOwiSajYRZK4rvrsJePZ2dLDrC+6evXq2hjrs7OxzWwqaTZmPOpHl2wL8NzYfY/OX2C5lT6m0e2z8wdYD79keXEgfi6zOtB4dhEJqdhFklCxiyShYhdJQsUukoSKXSQJFbtIEl3ts5tZ2Hdly+hGWO+R9T3ZvqP46dOnw21L+6Yst+i+sV42G8fP5rxnvfBo3ni2bcl5F0A8lp49ZiXPB6BzvfIS9JXdzDaY2Z/M7G0zGzWz71eX32pmu8zsver7QOfTFZFWLeRt/EUAP3T3BwA8BOB7ZvYAgKcB7Hb3jQB2V7+LSI+ixe7uY+7+RvXzFIB3AKwHsAXA9upq2wE83qkkRaTcNf3PbmZfBPBVAHsADLr7WBU6BmCwZpthAMOtpygi7bDgT+PNbBWA3wP4gbtf9emGz37aMO8nDu4+4u5D7j7EBg+ISOcsqNjNbAlmC/037v6H6uLjZra2iq8FMN6ZFEWkHejbeJt9OX4ewDvu/tM5oZ0AtgF4rvq+g92Wu4etIPbKHw3HZEMWWZyJcmPL/5YsRQ10dugvG+LKHhN2XKPt2f1ibUNmZmamNsZaZ+y4lC7pzG6/ExZSAV8D8B0Ab5nZvuqyZzBb5L8zsycBfAjgic6kKCLtQIvd3f8MoO7P89fbm46IdIpOlxVJQsUukoSKXSQJFbtIEip2kSR6airpTiqd+jfqi7KeLds36yeX9NlZD5/14dkQWLYkc7T/aEnlhWC96pJeNpummi35XLIUNsubPaa1t9vSViJy3VGxiyShYhdJQsUukoSKXSQJFbtIEip2kSS63mePesasHx31hKMpiwHeDy7Znk1LzPY9MTFRtH3Ul2W9bNazZeOy2e1Hjxk7v4Cd+8DOETh16lRLMYD3ulnuJcelU/TKLpKEil0kCRW7SBIqdpEkVOwiSajYRZJQsYsk0fU+e9RLL5k3vlNjgK+Ili7+5JNPwm1ZD5+Nh4/mP2dYP5f1g0uXTY7ue6eXLZ6enq6NTU5OhtsODMSLErNx/kwTx0Wv7CJJqNhFklCxiyShYhdJQsUukoSKXSQJFbtIEgtZn30DgF8DGATgAEbc/edm9iyAfwZworrqM+7+Mru9qIfIxi+3ertA+Trl0fjlkydPFu2bjY1m49lL1rxn85szJecQsG3ZWHpmamqqpRgA3HHHHWG8dH119ri0um1UBws5mhcB/NDd3zCzfgCvm9muKvYzd/+3a0lURJqxkPXZxwCMVT9Pmdk7ANZ3OjERaa9rei9iZl8E8FUAe6qLnjKz/Wb2gpnNe36hmQ2b2V4z21uUqYgUWXCxm9kqAL8H8AN3Pw3gFwC+DGATZl/5fzLfdu4+4u5D7j7UhnxFpEULKnYzW4LZQv+Nu/8BANz9uLtfcvfLAH4JYHPn0hSRUrTYbfajv+cBvOPuP51z+do5V/sWgAPtT09E2mUhn8Z/DcB3ALxlZvuqy54BsNXMNmG2HXcYwHcXssOobcBaVCXtCjYkceXKlS3fdjSUEuDDKdesWRPGWVuRteYi7Liw9hjLLdq+tB3Khv5Gx4UN7WUtyRUrVoRxdlyjNjO73+wxqbOQT+P/DGC+KqM9dRHpHTqDTiQJFbtIEip2kSRU7CJJqNhFklCxiyTRU0s2M1F/kQ0zffXVV8M467tG+x4dHQ23ZUNYx8bGwvjy5cvDeDQUtOTchHaIjhvrF7PjxuLRNNd79uypjS3ktg8ePBjGP/jggzAe3ffSac/r6JVdJAkVu0gSKnaRJFTsIkmo2EWSULGLJKFiF0nCOr1s7lU7MzsB4MM5F60B8HHXErg2vZpbr+YFKLdWtTO3u9399vkCXS32z+3cbG+vzk3Xq7n1al6AcmtVt3LT23iRJFTsIkk0XewjDe8/0qu59WpegHJrVVdya/R/dhHpnqZf2UWkS1TsIkk0Uuxm9qiZ/Z+ZHTSzp5vIoY6ZHTazt8xsX9Pr01Vr6I2b2YE5l91qZrvM7L3q+7xr7DWU27NmdrQ6dvvM7LGGcttgZn8ys7fNbNTMvl9d3uixC/LqynHr+v/sZrYYwLsA/hHAEQCvAdjq7m93NZEaZnYYwJC7N34Chpn9PYBpAL92969Ul/0rgAl3f676Qzng7v/SI7k9C2C66WW8q9WK1s5dZhzA4wD+CQ0euyCvJ9CF49bEK/tmAAfd/ZC7XwDwWwBbGsij57n7KwAmPnPxFgDbq5+3Y/bJ0nU1ufUEdx9z9zeqn6cAXFlmvNFjF+TVFU0U+3oAf53z+xH01nrvDuCPZva6mQ03ncw8Bt39yjxWxwAMNpnMPOgy3t30mWXGe+bYtbL8eSl9QPd5D7v7gwC+CeB71dvVnuSz/4P1Uu90Qct4d8s8y4z/TZPHrtXlz0s1UexHAWyY8/sXqst6grsfrb6PA3gJvbcU9fErK+hW38cbzudvemkZ7/mWGUcPHLsmlz9vothfA7DRzL5kZksBfBvAzgby+Bwz66s+OIGZ9QH4BnpvKeqdALZVP28DsKPBXK7SK8t41y0zjoaPXePLn7t7178APIbZT+TfB/CjJnKoyeseAG9WX6NN5wbgRcy+rfsUs59tPAngNgC7AbwH4H8B3NpDuf0ngLcA7MdsYa1tKLeHMfsWfT+AfdXXY00fuyCvrhw3nS4rkoQ+oBNJQsUukoSKXSQJFbtIEip2kSRU7CJJqNhFkvh/GX5DVTCqMD0AAAAASUVORK5CYII=\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "yPTDf4Uqoutu"
      },
      "source": [
        "# generar datos"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 282
        },
        "id": "cVyfZkhKoutu",
        "outputId": "81cf62c4-3874-4b96-ac7e-0017325f6011"
      },
      "source": [
        "z_test = np.random.randn(1, z_dim)\n",
        "x_gen = decoder2.predict(z_test)\n",
        "plt.imshow(x_gen[0])"
      ],
      "execution_count": 359,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.image.AxesImage at 0x7f7c92bbf0d0>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 359
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "_QSHUDmfo8aJ"
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    }
  ]
}