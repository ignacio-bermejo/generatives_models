{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "vae_03072021.ipynb",
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    },
    "accelerator": "GPU"
  },
  "cells": [
    {
      "cell_type": "code",
      "metadata": {
        "id": "8pyVSDAkK56j"
      },
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "from keras.datasets import fashion_mnist, cifar10\n",
        "import matplotlib.pyplot as plt"
      ],
      "execution_count": 3,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "P3wXp3Z6STLb",
        "outputId": "7777d3de-4a96-4800-f702-a39c9714dddd"
      },
      "source": [
        "(x_train, y_train), (x_test, y_test) = fashion_mnist.load_data()"
      ],
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/train-labels-idx1-ubyte.gz\n",
            "32768/29515 [=================================] - 0s 0us/step\n",
            "40960/29515 [=========================================] - 0s 0us/step\n",
            "Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/train-images-idx3-ubyte.gz\n",
            "26427392/26421880 [==============================] - 0s 0us/step\n",
            "26435584/26421880 [==============================] - 0s 0us/step\n",
            "Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/t10k-labels-idx1-ubyte.gz\n",
            "16384/5148 [===============================================================================================] - 0s 0us/step\n",
            "Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/t10k-images-idx3-ubyte.gz\n",
            "4423680/4422102 [==============================] - 0s 0us/step\n",
            "4431872/4422102 [==============================] - 0s 0us/step\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "wafj8mtjSvlU",
        "outputId": "99baef58-9b6c-47ab-c25c-6e074436e526"
      },
      "source": [
        "x_train.shape"
      ],
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(60000, 28, 28)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 5
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "id": "XqLWYQOUT8X2",
        "outputId": "4169b8df-4de1-4767-9fee-457aca0fb068"
      },
      "source": [
        "plt.set_cmap(\"gray\")"
      ],
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 0 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 282
        },
        "id": "IzX7kjOeTMfg",
        "outputId": "0d0e65eb-f3e9-4e1b-d76d-f449d81b210c"
      },
      "source": [
        "plt.imshow(x_train[50])"
      ],
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.image.AxesImage at 0x7f908aee5110>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 7
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_4Xm6d73TTPt",
        "outputId": "8efdf825-3afb-40ff-e5a8-137f944d4c9e"
      },
      "source": [
        "x_train[0]"
      ],
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n",
              "          0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n",
              "          0,   0],\n",
              "       [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n",
              "          0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n",
              "          0,   0],\n",
              "       [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n",
              "          0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n",
              "          0,   0],\n",
              "       [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   1,\n",
              "          0,   0,  13,  73,   0,   0,   1,   4,   0,   0,   0,   0,   1,\n",
              "          1,   0],\n",
              "       [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   3,\n",
              "          0,  36, 136, 127,  62,  54,   0,   0,   0,   1,   3,   4,   0,\n",
              "          0,   3],\n",
              "       [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   6,\n",
              "          0, 102, 204, 176, 134, 144, 123,  23,   0,   0,   0,   0,  12,\n",
              "         10,   0],\n",
              "       [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n",
              "          0, 155, 236, 207, 178, 107, 156, 161, 109,  64,  23,  77, 130,\n",
              "         72,  15],\n",
              "       [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   1,   0,\n",
              "         69, 207, 223, 218, 216, 216, 163, 127, 121, 122, 146, 141,  88,\n",
              "        172,  66],\n",
              "       [  0,   0,   0,   0,   0,   0,   0,   0,   0,   1,   1,   1,   0,\n",
              "        200, 232, 232, 233, 229, 223, 223, 215, 213, 164, 127, 123, 196,\n",
              "        229,   0],\n",
              "       [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n",
              "        183, 225, 216, 223, 228, 235, 227, 224, 222, 224, 221, 223, 245,\n",
              "        173,   0],\n",
              "       [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n",
              "        193, 228, 218, 213, 198, 180, 212, 210, 211, 213, 223, 220, 243,\n",
              "        202,   0],\n",
              "       [  0,   0,   0,   0,   0,   0,   0,   0,   0,   1,   3,   0,  12,\n",
              "        219, 220, 212, 218, 192, 169, 227, 208, 218, 224, 212, 226, 197,\n",
              "        209,  52],\n",
              "       [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   6,   0,  99,\n",
              "        244, 222, 220, 218, 203, 198, 221, 215, 213, 222, 220, 245, 119,\n",
              "        167,  56],\n",
              "       [  0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,   0,  55,\n",
              "        236, 228, 230, 228, 240, 232, 213, 218, 223, 234, 217, 217, 209,\n",
              "         92,   0],\n",
              "       [  0,   0,   1,   4,   6,   7,   2,   0,   0,   0,   0,   0, 237,\n",
              "        226, 217, 223, 222, 219, 222, 221, 216, 223, 229, 215, 218, 255,\n",
              "         77,   0],\n",
              "       [  0,   3,   0,   0,   0,   0,   0,   0,   0,  62, 145, 204, 228,\n",
              "        207, 213, 221, 218, 208, 211, 218, 224, 223, 219, 215, 224, 244,\n",
              "        159,   0],\n",
              "       [  0,   0,   0,   0,  18,  44,  82, 107, 189, 228, 220, 222, 217,\n",
              "        226, 200, 205, 211, 230, 224, 234, 176, 188, 250, 248, 233, 238,\n",
              "        215,   0],\n",
              "       [  0,  57, 187, 208, 224, 221, 224, 208, 204, 214, 208, 209, 200,\n",
              "        159, 245, 193, 206, 223, 255, 255, 221, 234, 221, 211, 220, 232,\n",
              "        246,   0],\n",
              "       [  3, 202, 228, 224, 221, 211, 211, 214, 205, 205, 205, 220, 240,\n",
              "         80, 150, 255, 229, 221, 188, 154, 191, 210, 204, 209, 222, 228,\n",
              "        225,   0],\n",
              "       [ 98, 233, 198, 210, 222, 229, 229, 234, 249, 220, 194, 215, 217,\n",
              "        241,  65,  73, 106, 117, 168, 219, 221, 215, 217, 223, 223, 224,\n",
              "        229,  29],\n",
              "       [ 75, 204, 212, 204, 193, 205, 211, 225, 216, 185, 197, 206, 198,\n",
              "        213, 240, 195, 227, 245, 239, 223, 218, 212, 209, 222, 220, 221,\n",
              "        230,  67],\n",
              "       [ 48, 203, 183, 194, 213, 197, 185, 190, 194, 192, 202, 214, 219,\n",
              "        221, 220, 236, 225, 216, 199, 206, 186, 181, 177, 172, 181, 205,\n",
              "        206, 115],\n",
              "       [  0, 122, 219, 193, 179, 171, 183, 196, 204, 210, 213, 207, 211,\n",
              "        210, 200, 196, 194, 191, 195, 191, 198, 192, 176, 156, 167, 177,\n",
              "        210,  92],\n",
              "       [  0,   0,  74, 189, 212, 191, 175, 172, 175, 181, 185, 188, 189,\n",
              "        188, 193, 198, 204, 209, 210, 210, 211, 188, 188, 194, 192, 216,\n",
              "        170,   0],\n",
              "       [  2,   0,   0,   0,  66, 200, 222, 237, 239, 242, 246, 243, 244,\n",
              "        221, 220, 193, 191, 179, 182, 182, 181, 176, 166, 168,  99,  58,\n",
              "          0,   0],\n",
              "       [  0,   0,   0,   0,   0,   0,   0,  40,  61,  44,  72,  41,  35,\n",
              "          0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n",
              "          0,   0],\n",
              "       [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n",
              "          0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n",
              "          0,   0],\n",
              "       [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n",
              "          0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n",
              "          0,   0]], dtype=uint8)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 8
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "98XTka2IVp0Z",
        "outputId": "457fa2c7-486c-462d-986a-4bb1adb7a00e"
      },
      "source": [
        "x_train[0] - 1"
      ],
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,\n",
              "        255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,\n",
              "        255, 255],\n",
              "       [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,\n",
              "        255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,\n",
              "        255, 255],\n",
              "       [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,\n",
              "        255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,\n",
              "        255, 255],\n",
              "       [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,   0,\n",
              "        255, 255,  12,  72, 255, 255,   0,   3, 255, 255, 255, 255,   0,\n",
              "          0, 255],\n",
              "       [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,   2,\n",
              "        255,  35, 135, 126,  61,  53, 255, 255, 255,   0,   2,   3, 255,\n",
              "        255,   2],\n",
              "       [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,   5,\n",
              "        255, 101, 203, 175, 133, 143, 122,  22, 255, 255, 255, 255,  11,\n",
              "          9, 255],\n",
              "       [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,\n",
              "        255, 154, 235, 206, 177, 106, 155, 160, 108,  63,  22,  76, 129,\n",
              "         71,  14],\n",
              "       [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,   0, 255,\n",
              "         68, 206, 222, 217, 215, 215, 162, 126, 120, 121, 145, 140,  87,\n",
              "        171,  65],\n",
              "       [255, 255, 255, 255, 255, 255, 255, 255, 255,   0,   0,   0, 255,\n",
              "        199, 231, 231, 232, 228, 222, 222, 214, 212, 163, 126, 122, 195,\n",
              "        228, 255],\n",
              "       [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,\n",
              "        182, 224, 215, 222, 227, 234, 226, 223, 221, 223, 220, 222, 244,\n",
              "        172, 255],\n",
              "       [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,\n",
              "        192, 227, 217, 212, 197, 179, 211, 209, 210, 212, 222, 219, 242,\n",
              "        201, 255],\n",
              "       [255, 255, 255, 255, 255, 255, 255, 255, 255,   0,   2, 255,  11,\n",
              "        218, 219, 211, 217, 191, 168, 226, 207, 217, 223, 211, 225, 196,\n",
              "        208,  51],\n",
              "       [255, 255, 255, 255, 255, 255, 255, 255, 255, 255,   5, 255,  98,\n",
              "        243, 221, 219, 217, 202, 197, 220, 214, 212, 221, 219, 244, 118,\n",
              "        166,  55],\n",
              "       [255, 255, 255, 255, 255, 255, 255, 255, 255,   3, 255, 255,  54,\n",
              "        235, 227, 229, 227, 239, 231, 212, 217, 222, 233, 216, 216, 208,\n",
              "         91, 255],\n",
              "       [255, 255,   0,   3,   5,   6,   1, 255, 255, 255, 255, 255, 236,\n",
              "        225, 216, 222, 221, 218, 221, 220, 215, 222, 228, 214, 217, 254,\n",
              "         76, 255],\n",
              "       [255,   2, 255, 255, 255, 255, 255, 255, 255,  61, 144, 203, 227,\n",
              "        206, 212, 220, 217, 207, 210, 217, 223, 222, 218, 214, 223, 243,\n",
              "        158, 255],\n",
              "       [255, 255, 255, 255,  17,  43,  81, 106, 188, 227, 219, 221, 216,\n",
              "        225, 199, 204, 210, 229, 223, 233, 175, 187, 249, 247, 232, 237,\n",
              "        214, 255],\n",
              "       [255,  56, 186, 207, 223, 220, 223, 207, 203, 213, 207, 208, 199,\n",
              "        158, 244, 192, 205, 222, 254, 254, 220, 233, 220, 210, 219, 231,\n",
              "        245, 255],\n",
              "       [  2, 201, 227, 223, 220, 210, 210, 213, 204, 204, 204, 219, 239,\n",
              "         79, 149, 254, 228, 220, 187, 153, 190, 209, 203, 208, 221, 227,\n",
              "        224, 255],\n",
              "       [ 97, 232, 197, 209, 221, 228, 228, 233, 248, 219, 193, 214, 216,\n",
              "        240,  64,  72, 105, 116, 167, 218, 220, 214, 216, 222, 222, 223,\n",
              "        228,  28],\n",
              "       [ 74, 203, 211, 203, 192, 204, 210, 224, 215, 184, 196, 205, 197,\n",
              "        212, 239, 194, 226, 244, 238, 222, 217, 211, 208, 221, 219, 220,\n",
              "        229,  66],\n",
              "       [ 47, 202, 182, 193, 212, 196, 184, 189, 193, 191, 201, 213, 218,\n",
              "        220, 219, 235, 224, 215, 198, 205, 185, 180, 176, 171, 180, 204,\n",
              "        205, 114],\n",
              "       [255, 121, 218, 192, 178, 170, 182, 195, 203, 209, 212, 206, 210,\n",
              "        209, 199, 195, 193, 190, 194, 190, 197, 191, 175, 155, 166, 176,\n",
              "        209,  91],\n",
              "       [255, 255,  73, 188, 211, 190, 174, 171, 174, 180, 184, 187, 188,\n",
              "        187, 192, 197, 203, 208, 209, 209, 210, 187, 187, 193, 191, 215,\n",
              "        169, 255],\n",
              "       [  1, 255, 255, 255,  65, 199, 221, 236, 238, 241, 245, 242, 243,\n",
              "        220, 219, 192, 190, 178, 181, 181, 180, 175, 165, 167,  98,  57,\n",
              "        255, 255],\n",
              "       [255, 255, 255, 255, 255, 255, 255,  39,  60,  43,  71,  40,  34,\n",
              "        255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,\n",
              "        255, 255],\n",
              "       [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,\n",
              "        255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,\n",
              "        255, 255],\n",
              "       [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,\n",
              "        255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,\n",
              "        255, 255]], dtype=uint8)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 9
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "wqTn8kc8TsdL"
      },
      "source": [
        "x_train = (x_train / 255. - 0.5) * 2.0  # queremos que estén entre -1 y 1\n",
        "x_test = (x_test / 255. - 0.5) * 2.0"
      ],
      "execution_count": 10,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "OX4s_P5DUtpo",
        "outputId": "e91c6e1c-4d82-457d-f12f-420183868814"
      },
      "source": [
        "x_train.min()"
      ],
      "execution_count": 44,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "-1.0"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 44
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "8ALvk3CFUuxH",
        "outputId": "b604d83d-fba4-48af-bf53-78b70b94934d"
      },
      "source": [
        "x_train[0]"
      ],
      "execution_count": 45,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[-1.        , -1.        , -1.        , -1.        , -1.        ,\n",
              "        -1.        , -1.        , -1.        , -1.        , -1.        ,\n",
              "        -1.        , -1.        , -1.        , -1.        , -1.        ,\n",
              "        -1.        , -1.        , -1.        , -1.        , -1.        ,\n",
              "        -1.        , -1.        , -1.        , -1.        , -1.        ,\n",
              "        -1.        , -1.        , -1.        ],\n",
              "       [-1.        , -1.        , -1.        , -1.        , -1.        ,\n",
              "        -1.        , -1.        , -1.        , -1.        , -1.        ,\n",
              "        -1.        , -1.        , -1.        , -1.        , -1.        ,\n",
              "        -1.        , -1.        , -1.        , -1.        , -1.        ,\n",
              "        -1.        , -1.        , -1.        , -1.        , -1.        ,\n",
              "        -1.        , -1.        , -1.        ],\n",
              "       [-1.        , -1.        , -1.        , -1.        , -1.        ,\n",
              "        -1.        , -1.        , -1.        , -1.        , -1.        ,\n",
              "        -1.        , -1.        , -1.        , -1.        , -1.        ,\n",
              "        -1.        , -1.        , -1.        , -1.        , -1.        ,\n",
              "        -1.        , -1.        , -1.        , -1.        , -1.        ,\n",
              "        -1.        , -1.        , -1.        ],\n",
              "       [-1.        , -1.        , -1.        , -1.        , -1.        ,\n",
              "        -1.        , -1.        , -1.        , -1.        , -1.        ,\n",
              "        -1.        , -1.        , -0.99215686, -1.        , -1.        ,\n",
              "        -0.89803922, -0.42745098, -1.        , -1.        , -0.99215686,\n",
              "        -0.96862745, -1.        , -1.        , -1.        , -1.        ,\n",
              "        -0.99215686, -0.99215686, -1.        ],\n",
              "       [-1.        , -1.        , -1.        , -1.        , -1.        ,\n",
              "        -1.        , -1.        , -1.        , -1.        , -1.        ,\n",
              "        -1.        , -1.        , -0.97647059, -1.        , -0.71764706,\n",
              "         0.06666667, -0.00392157, -0.51372549, -0.57647059, -1.        ,\n",
              "        -1.        , -1.        , -0.99215686, -0.97647059, -0.96862745,\n",
              "        -1.        , -1.        , -0.97647059],\n",
              "       [-1.        , -1.        , -1.        , -1.        , -1.        ,\n",
              "        -1.        , -1.        , -1.        , -1.        , -1.        ,\n",
              "        -1.        , -1.        , -0.95294118, -1.        , -0.2       ,\n",
              "         0.6       ,  0.38039216,  0.05098039,  0.12941176, -0.03529412,\n",
              "        -0.81960784, -1.        , -1.        , -1.        , -1.        ,\n",
              "        -0.90588235, -0.92156863, -1.        ],\n",
              "       [-1.        , -1.        , -1.        , -1.        , -1.        ,\n",
              "        -1.        , -1.        , -1.        , -1.        , -1.        ,\n",
              "        -1.        , -1.        , -1.        , -1.        ,  0.21568627,\n",
              "         0.85098039,  0.62352941,  0.39607843, -0.16078431,  0.22352941,\n",
              "         0.2627451 , -0.14509804, -0.49803922, -0.81960784, -0.39607843,\n",
              "         0.01960784, -0.43529412, -0.88235294],\n",
              "       [-1.        , -1.        , -1.        , -1.        , -1.        ,\n",
              "        -1.        , -1.        , -1.        , -1.        , -1.        ,\n",
              "        -1.        , -0.99215686, -1.        , -0.45882353,  0.62352941,\n",
              "         0.74901961,  0.70980392,  0.69411765,  0.69411765,  0.27843137,\n",
              "        -0.00392157, -0.05098039, -0.04313725,  0.14509804,  0.10588235,\n",
              "        -0.30980392,  0.34901961, -0.48235294],\n",
              "       [-1.        , -1.        , -1.        , -1.        , -1.        ,\n",
              "        -1.        , -1.        , -1.        , -1.        , -0.99215686,\n",
              "        -0.99215686, -0.99215686, -1.        ,  0.56862745,  0.81960784,\n",
              "         0.81960784,  0.82745098,  0.79607843,  0.74901961,  0.74901961,\n",
              "         0.68627451,  0.67058824,  0.28627451, -0.00392157, -0.03529412,\n",
              "         0.5372549 ,  0.79607843, -1.        ],\n",
              "       [-1.        , -1.        , -1.        , -1.        , -1.        ,\n",
              "        -1.        , -1.        , -1.        , -1.        , -1.        ,\n",
              "        -1.        , -1.        , -1.        ,  0.43529412,  0.76470588,\n",
              "         0.69411765,  0.74901961,  0.78823529,  0.84313725,  0.78039216,\n",
              "         0.75686275,  0.74117647,  0.75686275,  0.73333333,  0.74901961,\n",
              "         0.92156863,  0.35686275, -1.        ],\n",
              "       [-1.        , -1.        , -1.        , -1.        , -1.        ,\n",
              "        -1.        , -1.        , -1.        , -1.        , -1.        ,\n",
              "        -1.        , -1.        , -1.        ,  0.51372549,  0.78823529,\n",
              "         0.70980392,  0.67058824,  0.55294118,  0.41176471,  0.6627451 ,\n",
              "         0.64705882,  0.65490196,  0.67058824,  0.74901961,  0.7254902 ,\n",
              "         0.90588235,  0.58431373, -1.        ],\n",
              "       [-1.        , -1.        , -1.        , -1.        , -1.        ,\n",
              "        -1.        , -1.        , -1.        , -1.        , -0.99215686,\n",
              "        -0.97647059, -1.        , -0.90588235,  0.71764706,  0.7254902 ,\n",
              "         0.6627451 ,  0.70980392,  0.50588235,  0.3254902 ,  0.78039216,\n",
              "         0.63137255,  0.70980392,  0.75686275,  0.6627451 ,  0.77254902,\n",
              "         0.54509804,  0.63921569, -0.59215686],\n",
              "       [-1.        , -1.        , -1.        , -1.        , -1.        ,\n",
              "        -1.        , -1.        , -1.        , -1.        , -1.        ,\n",
              "        -0.95294118, -1.        , -0.22352941,  0.91372549,  0.74117647,\n",
              "         0.7254902 ,  0.70980392,  0.59215686,  0.55294118,  0.73333333,\n",
              "         0.68627451,  0.67058824,  0.74117647,  0.7254902 ,  0.92156863,\n",
              "        -0.06666667,  0.30980392, -0.56078431],\n",
              "       [-1.        , -1.        , -1.        , -1.        , -1.        ,\n",
              "        -1.        , -1.        , -1.        , -1.        , -0.96862745,\n",
              "        -1.        , -1.        , -0.56862745,  0.85098039,  0.78823529,\n",
              "         0.80392157,  0.78823529,  0.88235294,  0.81960784,  0.67058824,\n",
              "         0.70980392,  0.74901961,  0.83529412,  0.70196078,  0.70196078,\n",
              "         0.63921569, -0.27843137, -1.        ],\n",
              "       [-1.        , -1.        , -0.99215686, -0.96862745, -0.95294118,\n",
              "        -0.94509804, -0.98431373, -1.        , -1.        , -1.        ,\n",
              "        -1.        , -1.        ,  0.85882353,  0.77254902,  0.70196078,\n",
              "         0.74901961,  0.74117647,  0.71764706,  0.74117647,  0.73333333,\n",
              "         0.69411765,  0.74901961,  0.79607843,  0.68627451,  0.70980392,\n",
              "         1.        , -0.39607843, -1.        ],\n",
              "       [-1.        , -0.97647059, -1.        , -1.        , -1.        ,\n",
              "        -1.        , -1.        , -1.        , -1.        , -0.51372549,\n",
              "         0.1372549 ,  0.6       ,  0.78823529,  0.62352941,  0.67058824,\n",
              "         0.73333333,  0.70980392,  0.63137255,  0.65490196,  0.70980392,\n",
              "         0.75686275,  0.74901961,  0.71764706,  0.68627451,  0.75686275,\n",
              "         0.91372549,  0.24705882, -1.        ],\n",
              "       [-1.        , -1.        , -1.        , -1.        , -0.85882353,\n",
              "        -0.65490196, -0.35686275, -0.16078431,  0.48235294,  0.78823529,\n",
              "         0.7254902 ,  0.74117647,  0.70196078,  0.77254902,  0.56862745,\n",
              "         0.60784314,  0.65490196,  0.80392157,  0.75686275,  0.83529412,\n",
              "         0.38039216,  0.4745098 ,  0.96078431,  0.94509804,  0.82745098,\n",
              "         0.86666667,  0.68627451, -1.        ],\n",
              "       [-1.        , -0.55294118,  0.46666667,  0.63137255,  0.75686275,\n",
              "         0.73333333,  0.75686275,  0.63137255,  0.6       ,  0.67843137,\n",
              "         0.63137255,  0.63921569,  0.56862745,  0.24705882,  0.92156863,\n",
              "         0.51372549,  0.61568627,  0.74901961,  1.        ,  1.        ,\n",
              "         0.73333333,  0.83529412,  0.73333333,  0.65490196,  0.7254902 ,\n",
              "         0.81960784,  0.92941176, -1.        ],\n",
              "       [-0.97647059,  0.58431373,  0.78823529,  0.75686275,  0.73333333,\n",
              "         0.65490196,  0.65490196,  0.67843137,  0.60784314,  0.60784314,\n",
              "         0.60784314,  0.7254902 ,  0.88235294, -0.37254902,  0.17647059,\n",
              "         1.        ,  0.79607843,  0.73333333,  0.4745098 ,  0.20784314,\n",
              "         0.49803922,  0.64705882,  0.6       ,  0.63921569,  0.74117647,\n",
              "         0.78823529,  0.76470588, -1.        ],\n",
              "       [-0.23137255,  0.82745098,  0.55294118,  0.64705882,  0.74117647,\n",
              "         0.79607843,  0.79607843,  0.83529412,  0.95294118,  0.7254902 ,\n",
              "         0.52156863,  0.68627451,  0.70196078,  0.89019608, -0.49019608,\n",
              "        -0.42745098, -0.16862745, -0.08235294,  0.31764706,  0.71764706,\n",
              "         0.73333333,  0.68627451,  0.70196078,  0.74901961,  0.74901961,\n",
              "         0.75686275,  0.79607843, -0.77254902],\n",
              "       [-0.41176471,  0.6       ,  0.6627451 ,  0.6       ,  0.51372549,\n",
              "         0.60784314,  0.65490196,  0.76470588,  0.69411765,  0.45098039,\n",
              "         0.54509804,  0.61568627,  0.55294118,  0.67058824,  0.88235294,\n",
              "         0.52941176,  0.78039216,  0.92156863,  0.8745098 ,  0.74901961,\n",
              "         0.70980392,  0.6627451 ,  0.63921569,  0.74117647,  0.7254902 ,\n",
              "         0.73333333,  0.80392157, -0.4745098 ],\n",
              "       [-0.62352941,  0.59215686,  0.43529412,  0.52156863,  0.67058824,\n",
              "         0.54509804,  0.45098039,  0.49019608,  0.52156863,  0.50588235,\n",
              "         0.58431373,  0.67843137,  0.71764706,  0.73333333,  0.7254902 ,\n",
              "         0.85098039,  0.76470588,  0.69411765,  0.56078431,  0.61568627,\n",
              "         0.45882353,  0.41960784,  0.38823529,  0.34901961,  0.41960784,\n",
              "         0.60784314,  0.61568627, -0.09803922],\n",
              "       [-1.        , -0.04313725,  0.71764706,  0.51372549,  0.40392157,\n",
              "         0.34117647,  0.43529412,  0.5372549 ,  0.6       ,  0.64705882,\n",
              "         0.67058824,  0.62352941,  0.65490196,  0.64705882,  0.56862745,\n",
              "         0.5372549 ,  0.52156863,  0.49803922,  0.52941176,  0.49803922,\n",
              "         0.55294118,  0.50588235,  0.38039216,  0.22352941,  0.30980392,\n",
              "         0.38823529,  0.64705882, -0.27843137],\n",
              "       [-1.        , -1.        , -0.41960784,  0.48235294,  0.6627451 ,\n",
              "         0.49803922,  0.37254902,  0.34901961,  0.37254902,  0.41960784,\n",
              "         0.45098039,  0.4745098 ,  0.48235294,  0.4745098 ,  0.51372549,\n",
              "         0.55294118,  0.6       ,  0.63921569,  0.64705882,  0.64705882,\n",
              "         0.65490196,  0.4745098 ,  0.4745098 ,  0.52156863,  0.50588235,\n",
              "         0.69411765,  0.33333333, -1.        ],\n",
              "       [-0.98431373, -1.        , -1.        , -1.        , -0.48235294,\n",
              "         0.56862745,  0.74117647,  0.85882353,  0.8745098 ,  0.89803922,\n",
              "         0.92941176,  0.90588235,  0.91372549,  0.73333333,  0.7254902 ,\n",
              "         0.51372549,  0.49803922,  0.40392157,  0.42745098,  0.42745098,\n",
              "         0.41960784,  0.38039216,  0.30196078,  0.31764706, -0.22352941,\n",
              "        -0.54509804, -1.        , -1.        ],\n",
              "       [-1.        , -1.        , -1.        , -1.        , -1.        ,\n",
              "        -1.        , -1.        , -0.68627451, -0.52156863, -0.65490196,\n",
              "        -0.43529412, -0.67843137, -0.7254902 , -1.        , -1.        ,\n",
              "        -1.        , -1.        , -1.        , -1.        , -1.        ,\n",
              "        -1.        , -1.        , -1.        , -1.        , -1.        ,\n",
              "        -1.        , -1.        , -1.        ],\n",
              "       [-1.        , -1.        , -1.        , -1.        , -1.        ,\n",
              "        -1.        , -1.        , -1.        , -1.        , -1.        ,\n",
              "        -1.        , -1.        , -1.        , -1.        , -1.        ,\n",
              "        -1.        , -1.        , -1.        , -1.        , -1.        ,\n",
              "        -1.        , -1.        , -1.        , -1.        , -1.        ,\n",
              "        -1.        , -1.        , -1.        ],\n",
              "       [-1.        , -1.        , -1.        , -1.        , -1.        ,\n",
              "        -1.        , -1.        , -1.        , -1.        , -1.        ,\n",
              "        -1.        , -1.        , -1.        , -1.        , -1.        ,\n",
              "        -1.        , -1.        , -1.        , -1.        , -1.        ,\n",
              "        -1.        , -1.        , -1.        , -1.        , -1.        ,\n",
              "        -1.        , -1.        , -1.        ]])"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 45
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "YqKaN76jWDJ7"
      },
      "source": [
        "# Autoencoders"
      ],
      "execution_count": 46,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "i8QKorzXWOzx"
      },
      "source": [
        "z_dim = 10\n",
        "h_dim = 100"
      ],
      "execution_count": 11,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "3PAcBVlLW2dM"
      },
      "source": [
        "from keras.layers import Dense, Reshape, Flatten\n",
        "from keras.models import Sequential"
      ],
      "execution_count": 12,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Z0uTH86NW_ht"
      },
      "source": [
        "from keras.layers import Input\n",
        "from keras.models import Model"
      ],
      "execution_count": 13,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "pAS_XsCiXaBe",
        "outputId": "e88aad8e-a7d0-4b6e-e5f1-6e2bde7bd288"
      },
      "source": [
        "x_train.shape"
      ],
      "execution_count": 74,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(60000, 28, 28)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 74
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "evQOb6qtXTGe"
      },
      "source": [
        "encoder = Sequential([\n",
        "                      Flatten(input_shape= (28,28)),\n",
        "                      Dense(h_dim, activation=\"relu\"),\n",
        "                      Dense(z_dim, activation=\"tanh\"),\n",
        "])"
      ],
      "execution_count": 75,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "hEsCp4vkYTed",
        "outputId": "57058f13-5162-4e5a-810d-e2a10ec25f3c"
      },
      "source": [
        "encoder.summary()"
      ],
      "execution_count": 76,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Model: \"sequential_5\"\n",
            "_________________________________________________________________\n",
            "Layer (type)                 Output Shape              Param #   \n",
            "=================================================================\n",
            "flatten_5 (Flatten)          (None, 784)               0         \n",
            "_________________________________________________________________\n",
            "dense_10 (Dense)             (None, 100)               78500     \n",
            "_________________________________________________________________\n",
            "dense_11 (Dense)             (None, 10)                1010      \n",
            "=================================================================\n",
            "Total params: 79,510\n",
            "Trainable params: 79,510\n",
            "Non-trainable params: 0\n",
            "_________________________________________________________________\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "avbxMmXXYWQc"
      },
      "source": [
        "decoder = Sequential([\n",
        "                      Dense(h_dim, activation=\"relu\", input_shape=(z_dim,)),\n",
        "                      Dense(x_train.shape[1]*x_train.shape[2], activation=\"tanh\"),\n",
        "                      Reshape((28, 28)),\n",
        "])"
      ],
      "execution_count": 80,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Id_qwZhfaeZN",
        "outputId": "d03c2ab4-8f4d-4144-9389-e67b9874e3a5"
      },
      "source": [
        "decoder.summary()"
      ],
      "execution_count": 81,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Model: \"sequential_7\"\n",
            "_________________________________________________________________\n",
            "Layer (type)                 Output Shape              Param #   \n",
            "=================================================================\n",
            "dense_15 (Dense)             (None, 100)               1100      \n",
            "_________________________________________________________________\n",
            "dense_16 (Dense)             (None, 784)               79184     \n",
            "_________________________________________________________________\n",
            "reshape (Reshape)            (None, 28, 28)            0         \n",
            "=================================================================\n",
            "Total params: 80,284\n",
            "Trainable params: 80,284\n",
            "Non-trainable params: 0\n",
            "_________________________________________________________________\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5Q4HSvxbanLk",
        "outputId": "48d53a94-c39f-483e-ae46-775c8388804d"
      },
      "source": [
        "# probamos\n",
        "encoder.predict(x_train[0:1])"
      ],
      "execution_count": 86,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[-0.31390586, -0.7431263 ,  0.4854769 , -0.02918792, -0.69631416,\n",
              "         0.71795005, -0.54911697, -0.87634605, -0.3478447 , -0.19414124]],\n",
              "      dtype=float32)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 86
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 282
        },
        "id": "nDht_lewa3M9",
        "outputId": "74a6fb0b-883d-4ffc-db8e-5bf619ceb6ed"
      },
      "source": [
        "plt.imshow(decoder.predict(np.random.randn(1, 10))[0])"
      ],
      "execution_count": 89,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.image.AxesImage at 0x7f595c6b0110>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 89
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "LKcBEXlpa_G9"
      },
      "source": [
        "# autoencoder\n",
        "autoencoder = Sequential([encoder, decoder])"
      ],
      "execution_count": 90,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Hg8TjGTVbeTD",
        "outputId": "10ef6bd9-23df-4666-83e1-244aa1694bf0"
      },
      "source": [
        "autoencoder.summary()"
      ],
      "execution_count": 91,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Model: \"sequential_8\"\n",
            "_________________________________________________________________\n",
            "Layer (type)                 Output Shape              Param #   \n",
            "=================================================================\n",
            "sequential_5 (Sequential)    (None, 10)                79510     \n",
            "_________________________________________________________________\n",
            "sequential_7 (Sequential)    (None, 28, 28)            80284     \n",
            "=================================================================\n",
            "Total params: 159,794\n",
            "Trainable params: 159,794\n",
            "Non-trainable params: 0\n",
            "_________________________________________________________________\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "E0eI7V92bfa8"
      },
      "source": [
        "# entrenamiento"
      ],
      "execution_count": 92,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "oIZ_EqyEbnP-"
      },
      "source": [
        "autoencoder.compile(optimizer=\"adam\", loss=\"mse\")"
      ],
      "execution_count": 93,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "PZVQvBNycTT_",
        "outputId": "b41cef6b-febd-4e01-9987-41fd0906a0c5"
      },
      "source": [
        "autoencoder.fit(x_train, x_train, batch_size=512, epochs=40, validation_data=(x_test, x_test))"
      ],
      "execution_count": 94,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Epoch 1/40\n",
            "118/118 [==============================] - 7s 8ms/step - loss: 0.3945 - val_loss: 0.1491\n",
            "Epoch 2/40\n",
            "118/118 [==============================] - 1s 4ms/step - loss: 0.1369 - val_loss: 0.1114\n",
            "Epoch 3/40\n",
            "118/118 [==============================] - 1s 4ms/step - loss: 0.1083 - val_loss: 0.1013\n",
            "Epoch 4/40\n",
            "118/118 [==============================] - 1s 4ms/step - loss: 0.0989 - val_loss: 0.0953\n",
            "Epoch 5/40\n",
            "118/118 [==============================] - 1s 4ms/step - loss: 0.0941 - val_loss: 0.0908\n",
            "Epoch 6/40\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 0.0895 - val_loss: 0.0871\n",
            "Epoch 7/40\n",
            "118/118 [==============================] - 1s 4ms/step - loss: 0.0863 - val_loss: 0.0841\n",
            "Epoch 8/40\n",
            "118/118 [==============================] - 1s 4ms/step - loss: 0.0834 - val_loss: 0.0819\n",
            "Epoch 9/40\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 0.0807 - val_loss: 0.0808\n",
            "Epoch 10/40\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 0.0795 - val_loss: 0.0779\n",
            "Epoch 11/40\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 0.0770 - val_loss: 0.0770\n",
            "Epoch 12/40\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 0.0757 - val_loss: 0.0753\n",
            "Epoch 13/40\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 0.0745 - val_loss: 0.0747\n",
            "Epoch 14/40\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 0.0739 - val_loss: 0.0734\n",
            "Epoch 15/40\n",
            "118/118 [==============================] - 1s 4ms/step - loss: 0.0724 - val_loss: 0.0723\n",
            "Epoch 16/40\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 0.0714 - val_loss: 0.0726\n",
            "Epoch 17/40\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 0.0710 - val_loss: 0.0709\n",
            "Epoch 18/40\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 0.0708 - val_loss: 0.0708\n",
            "Epoch 19/40\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 0.0695 - val_loss: 0.0696\n",
            "Epoch 20/40\n",
            "118/118 [==============================] - 1s 4ms/step - loss: 0.0690 - val_loss: 0.0694\n",
            "Epoch 21/40\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 0.0681 - val_loss: 0.0684\n",
            "Epoch 22/40\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 0.0673 - val_loss: 0.0696\n",
            "Epoch 23/40\n",
            "118/118 [==============================] - 1s 4ms/step - loss: 0.0676 - val_loss: 0.0677\n",
            "Epoch 24/40\n",
            "118/118 [==============================] - 1s 4ms/step - loss: 0.0667 - val_loss: 0.0672\n",
            "Epoch 25/40\n",
            "118/118 [==============================] - 1s 4ms/step - loss: 0.0658 - val_loss: 0.0665\n",
            "Epoch 26/40\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 0.0658 - val_loss: 0.0664\n",
            "Epoch 27/40\n",
            "118/118 [==============================] - 1s 4ms/step - loss: 0.0651 - val_loss: 0.0654\n",
            "Epoch 28/40\n",
            "118/118 [==============================] - 1s 4ms/step - loss: 0.0648 - val_loss: 0.0650\n",
            "Epoch 29/40\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 0.0642 - val_loss: 0.0652\n",
            "Epoch 30/40\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 0.0639 - val_loss: 0.0649\n",
            "Epoch 31/40\n",
            "118/118 [==============================] - 1s 4ms/step - loss: 0.0640 - val_loss: 0.0650\n",
            "Epoch 32/40\n",
            "118/118 [==============================] - 1s 4ms/step - loss: 0.0632 - val_loss: 0.0638\n",
            "Epoch 33/40\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 0.0631 - val_loss: 0.0652\n",
            "Epoch 34/40\n",
            "118/118 [==============================] - 1s 4ms/step - loss: 0.0630 - val_loss: 0.0635\n",
            "Epoch 35/40\n",
            "118/118 [==============================] - 1s 4ms/step - loss: 0.0621 - val_loss: 0.0643\n",
            "Epoch 36/40\n",
            "118/118 [==============================] - 1s 4ms/step - loss: 0.0628 - val_loss: 0.0628\n",
            "Epoch 37/40\n",
            "118/118 [==============================] - 1s 4ms/step - loss: 0.0619 - val_loss: 0.0626\n",
            "Epoch 38/40\n",
            "118/118 [==============================] - 1s 4ms/step - loss: 0.0621 - val_loss: 0.0631\n",
            "Epoch 39/40\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 0.0619 - val_loss: 0.0623\n",
            "Epoch 40/40\n",
            "118/118 [==============================] - 1s 4ms/step - loss: 0.0617 - val_loss: 0.0623\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<keras.callbacks.History at 0x7f595c4d53d0>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 94
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "fPukQQFPdLEV"
      },
      "source": [
        "history = _94"
      ],
      "execution_count": 98,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "mYmAdNFodUPd",
        "outputId": "f9afd540-878d-4833-b67b-5d0209560bf8"
      },
      "source": [
        "plt.figure(figsize=(20,20))\n",
        "plt.plot(history.history['loss'])\n",
        "plt.plot(history.history['val_loss'])\n",
        "plt.legend([\"loss\", \"val_loss\"])\n",
        "plt.grid()"
      ],
      "execution_count": 103,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "iVBORw0KGgoAAAANSUhEUgAABI4AAAReCAYAAACxVXu2AAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4yLjIsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+WH4yJAAAgAElEQVR4nOzdf7Dld13n+dfnnv6ePt+yg/ySDhCKhBo0A2kNRYNSU4TEYglaCKhIRH4XP2pVRMWlyIg/WAZLh9Tq7tZQIOXyy8ENEZ2ZzBDMWpAW2QErEBPCD82kMsB2AEkiOLT0ze3u+9k/zr1NJ7lJOuSe8/18bz8eVV30Pefc05+T8y3+eNbn/fmWWmsAAAAA4M5Whl4AAAAAAG0SjgAAAADYknAEAAAAwJaEIwAAAAC2JBwBAAAAsCXhCAAAAIAt7Rp6AffFQx/60HrmmWcOvYxt8c///M/5nu/5nqGXwcBcBySuA+ZcBySuA+ZcBySuA+ZcByTLuQ4+/elP31pr/b6tnhtVODrzzDPzqU99auhlbIsDBw7k/PPPH3oZDMx1QOI6YM51QOI6YM51QOI6YM51QLKc66CU8qW7e86oGgAAAABbEo4AAAAA2JJwBAAAAMCWRnXGEQAAAMCdHTlyJAcPHszq6urQS9l23/u935svfOEL2/Jes9ksZ5xxRrquO+nfEY4AAACAUTt48GBOO+20nHnmmSmlDL2cbfWtb30rp5122v1+n1prbrvtthw8eDBnnXXWSf+eUTUAAABg1FZXV/OQhzxkx0Wj7VRKyUMe8pD7vCtLOAIAAABGTzS6d9/NfyPhCAAAAOB+2rNnz9BLWAjhCAAAAIAtCUcAAAAA26TWmte//vU555xzsm/fvnzgAx9Iknz1q1/Neeedl3PPPTfnnHNO/vqv/zrHjh3Ly172suOv/YM/+IOBV39X7qoGAAAA7Bj/63/+XD7/lf+xre/5uEc8IL/9E48/qdf++Z//ea699tpcd911ufXWW/OkJz0p5513Xv7kT/4kF154Yd74xjfm2LFj+fa3v51rr702N998cz772c8mSb75zW9u67q3gx1HAAAAANvk4x//eF7wghdkMplk7969edrTnparr746T3rSk/Lud787b3rTm3L99dfntNNOy2Me85jcdNNN+aVf+qX8xV/8RR7wgAcMvfy7sOMIAAAA2DFOdmfQsp133nn52Mc+lg996EN52ctelte97nV5yUtekuuuuy5XXnll3vGOd+Syyy7Lu971rqGXegd2HAEAAABsk6c+9an5wAc+kGPHjuWWW27Jxz72sTz5yU/Ol770pezduzevetWr8spXvjLXXHNNbr311qyvr+enf/qn85a3vCXXXHPN0Mu/CzuOAAAAALbJT/7kT+YTn/hEfuiHfiillLz1rW/N6aefnve+97255JJL0nVd9uzZk/e97325+eab8/KXvzzr6+tJkt/93d8dePV3JRwBAAAA3E+HDh1KkpRScskll+SSSy65w/MvfelL89KXvvQuv9fiLqMTGVUDAAAAYEvCEQAAAABbEo4AAAAA2JJwBAAAAMCWhCMAAAAAtiQcAQAAALAl4QgAAACALQlHAAAAAEu0Z8+eu33ui1/8Ys4555wlruaeCUcAAAAAbGnX0AsAAAAA2DYfvjj52vXb+56n70t+7Pfu9umLL744j3rUo/KLv/iLSZI3velN2bVrV6666qp84xvfyJEjR/KWt7wlz3nOc+7TP7u6upqf//mfz3XXXZddu3bl93//93PBBRfkc5/7XF7+8pdnbW0t6+vr+bM/+7M84hGPyPOf//wcPHgwx44dy2/+5m/moosuul8fOxGOAAAAAO6Xiy66KL/yK79yPBxddtllufLKK/Pa1742D3jAA3LrrbfmR37kR/LsZz87pZSTft+3ve1tKaXk+uuvz9/93d/lGc94Rm644Ya84x3vyC//8i/nhS98YdbW1nLs2LFcccUVecQjHpEPfehDSZJ/+qd/2pbPJhwBAAAAO8c97AxalCc84Qn5+te/nq985Su55ZZb8qAHPSinn356fvVXfzUf+9jHsrKykptvvjn/8A//kNNPP/2k3/fjH/94XvGKVyRJzj777Dz60Y/ODTfckKc85Sn5nd/5nRw8eDA/9VM/lcc+9rHZt29ffu3Xfi1veMMb8qxnPStPfepTt+WzOeMIAAAA4H76mZ/5mXzwgx/MBz7wgVx00UV5//vfn1tuuSWf/vSnc+2112bv3r1ZXV3dln/r537u53L55Zen7/v8+I//eD760Y/m+7//+3PNNddk3759+Y3f+I28+c1v3pZ/y44jAAAAgPvpoosuyqte9arceuut+au/+qtcdtlledjDHpau63LVVVfl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iEhJCo5ERERERERERKQkBUciIiIiIiIiIlKSgiMRERERERERESlJwZGIiIiIiIiIiJSk4EhEREREREREREpScCQiIiIiIiIiIiUpOBIRERERERERkZIUHImIiIiIiIiISEkKjkREREREREREpCQFRyIiIiIiIiIiUpKCIxERERERERERKUnBkYiIiIiIiIiIlKTgSERERERERERESlJwJCIiIiIiIiIiJSk4EhERERERERGRkhQciYiIiIiIiIhISQqORERERERERESkJAVHIiIiIiIiIiJSkoIjEREREREREREpScGRiIiIiIiIiIiUpOBIRERERERERERKUnAkIiIiIiIiIiIlKTgSEREREREREZGSFByJiIiIiIiIiEhJCo5ERERERERERKQkBUciIiIiIiIiIlKSgiMRERERERERESlJwZGIiIiIiIiIiJSk4EhEREREREREREpScCQiIiIiIiIiIiUpOBIRERERERERkZIUHImIiIiIiIiISEkKjkREREREREREpCQFRyIiIiIiIiIiUpKCIxERERERERERKUnBkYiIiIiIiIiIlKTgSERERERERERESlJwJCIiIiIiIiIiJSk4EhERERERERGRkhQciYiIiIiIiIhISQqORERERERERESkJAVHIiIiIiIiIiJSkoIjEREREREREREpScGRiIiIiIiIiIiUpOBIRERERERERERKMo7jlLsN580Y0wUcLnc7LpFaoLvcjZCy03MgoOdALD0HAnoOxNJzIKDnQCw9BwLT8xy0OY5TV+rEFRUcXU2MMZsdx1lT7nZIeek5ENBzIJaeAwE9B2LpORDQcyCWngOB8j8HGqomIiIiIiIiIiIlKTgSEREREREREZGSFByVzxfK3QCZEfQcCOg5EEvPgYCeA7H0HAjoORBLz4FAmZ8DzXEkIiIiIiIiIiIlqceRiIiIiIiIiIiUpOBomhlj7jHG7DbG7DPGfKLc7ZHyMMYcMsa8YYx53RizudztkeljjPmSMabTGLOtqK7aGPMDY8xed1tVzjbK5TfFc/ApY8xx973wujHmp8rZRrm8jDGtxpinjDE7jDHbjTG/6dbrfTCLnOM50PtgFjHGhIwxLxljtrjPwafd+vnGmBfdfzf8uzEmUO62yuVzjufgy8aYg0Xvg9XlbqtcfsYYrzHmNWPMI+5xWd8HCo6mkTHGC/w9cC+wDPiAMWZZeVslZXS74zirtbzmrPNl4J4z6j4BPOk4zkLgSfdYrm5f5uznAOBz7nthteM4j01zm2R65YDfcRxnGbAO+DX37wR6H8wuUz0HoPfBbJIG7nAcZxWwGrjHGLMO+Cz2OegA+oBfKmMb5fKb6jkA+HjR++D18jVRptFvAjuLjsv6PlBwNL1uBPY5jnPAcZwM8ADw7jK3SUSmkeM4PwJ6z6h+N/AVd/8rwHumtVEy7aZ4DmQWcRznpOM4r7r7Q9i/HM5B74NZ5RzPgcwijjXsHvrd4gB3AN9w6/U+uMqd4zmQWcYY0wK8A/g/7rGhzO8DBUfTaw5wtOj4GPrLwWzlAN83xrxijPmVcjdGyq7BcZyT7v4poKGcjZGy+nVjzFZ3KJuGKM0Sxph5wLXAi+h9MGud8RyA3gezijss5XWgE/gBsB/odxwn516ifzfMAmc+B47jjL0PPuO+Dz5njAmWsYkyPf4a+O9AwT2uoczvAwVHIuWxwXGc67DDFn/NGHNruRskM4Njl7rU/12anf4RaMd2Tz8J/GV5myPTwRgTA74J/JbjOIPF5/Q+mD1KPAd6H8wyjuPkHcdZDbRgRyksKXOTpAzOfA6MMcuB/4F9Hm4AqoHfK2MT5TIzxrwT6HQc55Vyt6WYgqPpdRxoLTpucetklnEc57i77QS+hf0Lgsxep40xTQDutrPM7ZEycBzntPsXxgLwRfReuOoZY/zYsOBfHcd5yK3W+2CWKfUc6H0wezmO0w88BdwEVBpjfO4p/bthFil6Du5xh7Q6juOkgX9G74Or3c3Au4wxh7BT29wBfJ4yvw8UHE2vl4GF7ozoAeD9wHfL3CaZZsaYqDEmPrYP3AVsO/en5Cr3XeDD7v6Hge+UsS1SJmNhgeun0XvhqubOV/B/gZ2O4/xV0Sm9D2aRqZ4DvQ9mF2NMnTGm0t0PA2/Hznf1FHC/e5neB1e5KZ6DXUX/M8Fg57XR++Aq5jjO/3Acp8VxnHnYvGCT4zgfpMzvA2N7Qct0cZdT/WvAC3zJcZzPlLlJMs2MMQuwvYwAfMC/6TmYPYwxXwc2ArXAaeAPgW8DDwJzgcPA+xzH0cTJV7EpnoON2GEpDnAI+G9Fc93IVcYYswH4MfAGE3MY/D52fhu9D2aJczwHH0Dvg1nDGLMSO9mtF/s/9h90HOeP3L8zPoAdnvQa8CG314lchc7xHGwC6gADvA58pGgSbbmKGWM2Ar/rOM47y/0+UHAkIiIiIiIiIiIlaaiaiIiIiIiIiIiUpOBIRERERERERERKUnAkIiIiIiIiIiIlKTgSEREREREREZGSFByJiIiIiIiIiEhJCo5ERERERERERKQkBUciIiIiIiIiIlKSgiMRERERERERESnp/wHVtSei+ww3bQAAAABJRU5ErkJggg==\n",
            "text/plain": [
              "<Figure size 1440x1440 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 282
        },
        "id": "r5V4UgqEdwMK",
        "outputId": "4fd0e390-9865-4ba0-ef37-79f8b08203e6"
      },
      "source": [
        "plt.imshow(x_test[7])"
      ],
      "execution_count": 105,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.image.AxesImage at 0x7f596c1d8090>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 105
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 282
        },
        "id": "PejY0lPvf3JL",
        "outputId": "3b8c036c-66fa-4fd1-8289-5b67a953b025"
      },
      "source": [
        "reconstruction = autoencoder.predict(x_test[7:8])\n",
        "plt.imshow(reconstruction[0])"
      ],
      "execution_count": 106,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.image.AxesImage at 0x7f595c2eeb50>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 106
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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2dlp1r32mSW1debdd8o0Va8N69W9n5nVevOWFvfu21ui2/t9KwIf2YmCYNiJgmDYiYJg2ImCYNiJgmDYiYJg2ImCWDV99tQlj69cuWLWm5qacmtjY2PmsV4f3hvbtWvXko63pPayvfOWwvuZelN/z507l1vzrg9YWFgw6945T71+oRL4yE4UBMNOFATDThQEw04UBMNOFATDThQEw04UxKrps3u8paS9vqu1bfLw8LB5rNcnT+11p2xl7fHOi/f1rfPuzbX3zsumTZvMurWEt3dOva89Oztr1r3ftyLwkZ0oCIadKAiGnSgIhp0oCIadKAiGnSgIhp0oiFXTZ6+rqzPr3ha6mzdvNuu33357bu311183j/XWtG9ubjbrMzMzZt3rV1taW1vNujdn3JvPnrJFt9cLt659AIDx8fGSv/bWrVvN+ieffGLWvd8362fmja1U7m+JiGwXkT+IyDsi8raIfDe7vVVE+kXk/extS0VGSERlsZKHhOsAvq+qPQD+FsB3RKQHwFMAjqvqbgDHs4+JqEa5YVfVMVU9mb0/C+BdAHcAOATgaPZpRwE8XKlBElG6L/Q3u4jsAPAVAH8C0KGqtxZfGwfQkXNML4De0odIROWw4ld2RKQBwG8BfE9VP/WKkS6+CrPsKzGq2qeq+1V1f9JIiSjJisIuImuxGPRfqervspsviEhXVu8CMFGZIRJRObhP42VxDuNzAN5V1R8vKR0DcATAs9nblysywk+PJbfmtbe81py39K815fH8+fPmsd7YPN6yxVYbx2vLpS7BnbLksjd91rtv77xaU4u9bbS9lqQ3rdnbErqIpaRX8lt4EMC3AJwRkcHstqexGPLfiMjjAM4DeLQyQySicnDDrqp/BJD339BXyzscIqoUXi5LFATDThQEw04UBMNOFATDThTEqpni6vWTU3rVgD3V0+uzez18b6lpb5qptWyx18/1lkxO3S7aOt471pvq6fWyrWsAvJ/Znj17zPrVq1fNuje1l1s2E1HFMOxEQTDsREEw7ERBMOxEQTDsREEw7ERBrJo+u8ebO+312a0lk6empsxj29razPr69evNurf9rzVX35vH733f3nLN3nmdn5836xbv+gSvz2716UdHR81je3p6Sv7aQNr3XSl8ZCcKgmEnCoJhJwqCYScKgmEnCoJhJwqCYScKYtX02b35w978Y68fPTk5WfLX9rZk9rYH9uaUW71yb970li1bzPrc3JxZ976+1QtP2c4ZABobG826ta68tZ0z4G/J7P1MvD4857MTUcUw7ERBMOxEQTDsREEw7ERBMOxEQTDsREGsZH/27QB+CaADgALoU9WfisgzAP4RwMXsU59W1VdTBlPJ3qM377q+vt6sW/OTU3uuLS0tZt3bS9zqJ3tz5b3v21vb3fuZWecmtRftrXlv/cy96we8r93U1GTWU36XvWNLvT5hJRfVXAfwfVU9KSKNAE6ISH9W+4mq/ktJ90xEVbWS/dnHAIxl78+KyLsA7qj0wIiovL7Q3+wisgPAVwD8KbvpSRE5LSLPi8iyz0VFpFdEBkRkIGmkRJRkxWEXkQYAvwXwPVWdAfAzADsB7MPiI/+PljtOVftUdb+q7i/DeImoRCsKu4isxWLQf6WqvwMAVb2gqjdU9SaAnwM4ULlhElEqN+yy+NLgcwDeVdUfL7m9a8mnfQPA2fIPj4jKZSWvxh8E8C0AZ0RkMLvtaQCHRWQfFttxwwC+XZERLmG1JLx2hbdkssdqIXmtkKGhIbM+MTFh1hsaGsy6NT3Xa61502+9Zay99pk1/ddrWXr14eFhs24t8e1NS7a2ewb8Za69lmcRVvJq/B8BLJekpJ46EVUXr6AjCoJhJwqCYScKgmEnCoJhJwqCYScKQlKX8/1CdyaSdGdWL93bWnjPnj1m/a677jLrVq+7v78/twb4PV1vKen29naz3tramlvr7Ow0j/Wm11pbVQP+1sTWkszW8twAMDY2Zta95aCnp6dza93d3eaxBw8eNOtej//UqVNmfWRkJLfmTcf2qOqyQeEjO1EQDDtREAw7URAMO1EQDDtREAw7URAMO1EQ1e6zXwRwfslN7QAuVW0AX0ytjq1WxwVwbKUq59juVNVl9+Guatg/d+ciA7W6Nl2tjq1WxwVwbKWq1tj4NJ4oCIadKIiiw95X8P1banVstTougGMrVVXGVujf7ERUPUU/shNRlTDsREEUEnYReVBE/ldEzonIU0WMIY+IDIvIGREZLHp/umwPvQkRObvktlYR6ReR97O39oT06o7tGREZzc7doIg8VNDYtovIH0TkHRF5W0S+m91e6LkzxlWV81b1v9lFpA7AewD+AcAIgDcBHFbVd6o6kBwiMgxgv6oWfgGGiPwdgDkAv1TVL2e3/TOASVV9NvuPskVVf1AjY3sGwFzR23hnuxV1Ld1mHMDDAB5DgefOGNejqMJ5K+KR/QCAc6o6pKrXAPwawKECxlHzVPU1AJ9dzuUQgKPZ+0ex+MtSdTljqwmqOqaqJ7P3ZwHc2ma80HNnjKsqigj7HQD+vOTjEdTWfu8K4PcickJEeosezDI6VPXWek3jADqKHMwy3G28q+kz24zXzLkrZfvzVHyB7vPuU9W/AfB1AN/Jnq7WJF38G6yWeqcr2sa7WpbZZvwvijx3pW5/nqqIsI8C2L7k423ZbTVBVUeztxMAXkLtbUV94dYOutlbe1fIKqqlbbyX22YcNXDuitz+vIiwvwlgt4h8SUTWAfgmgGMFjONzRKQ+e+EEIlIP4Guova2ojwE4kr1/BMDLBY7lU2plG++8bcZR8LkrfPtzVa36PwAPYfEV+f8D8E9FjCFnXN0A3sr+vV302AC8iMWndQtYfG3jcQBtAI4DeB/AfwNoraGx/TuAMwBOYzFYXQWN7T4sPkU/DWAw+/dQ0efOGFdVzhsvlyUKgi/QEQXBsBMFwbATBcGwEwXBsBMFwbATBcGwEwXx/9SAjDKmOKT8AAAAAElFTkSuQmCC\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "3DqbK_vghDjs",
        "outputId": "cd7c3f8a-b463-4eeb-e9d9-5109596f780f"
      },
      "source": [
        "x_test[7:8].shape"
      ],
      "execution_count": 113,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(1, 28, 28)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 113
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "UKb6bfqVgB_8",
        "outputId": "e6dbeabc-9ef3-4aa8-a034-1121c6604cdb"
      },
      "source": [
        "encoder.predict(x_test[7:8])"
      ],
      "execution_count": 114,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[-0.27211744, -0.30844095, -0.2860087 , -0.5062391 ,  0.27589265,\n",
              "         0.46724057, -0.05107182,  0.10548299,  0.45785457, -0.5402587 ]],\n",
              "      dtype=float32)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 114
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 282
        },
        "id": "7HhzRSqGgWGL",
        "outputId": "0ed1387d-2a26-46f5-ab38-ad6057b9be9b"
      },
      "source": [
        "reconstruction2 = decoder.predict( encoder.predict(x_test[7:8]) )\n",
        "plt.imshow(reconstruction2[0])"
      ],
      "execution_count": 108,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.image.AxesImage at 0x7f595c29d190>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 108
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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2dlp1r32mSW1debdd8o0Va8N69W9n5nVevOWFvfu21ui2/t9KwIf2YmCYNiJgmDYiYJg2ImCYNiJgmDYiYJg2ImCWDV99tQlj69cuWLWm5qacmtjY2PmsV4f3hvbtWvXko63pPayvfOWwvuZelN/z507l1vzrg9YWFgw6945T71+oRL4yE4UBMNOFATDThQEw04UBMNOFATDThQEw04UxKrps3u8paS9vqu1bfLw8LB5rNcnT+11p2xl7fHOi/f1rfPuzbX3zsumTZvMurWEt3dOva89Oztr1r3ftyLwkZ0oCIadKAiGnSgIhp0oCIadKAiGnSgIhp0oiFXTZ6+rqzPr3ha6mzdvNuu33357bu311183j/XWtG9ubjbrMzMzZt3rV1taW1vNujdn3JvPnrJFt9cLt659AIDx8fGSv/bWrVvN+ieffGLWvd8362fmja1U7m+JiGwXkT+IyDsi8raIfDe7vVVE+kXk/extS0VGSERlsZKHhOsAvq+qPQD+FsB3RKQHwFMAjqvqbgDHs4+JqEa5YVfVMVU9mb0/C+BdAHcAOATgaPZpRwE8XKlBElG6L/Q3u4jsAPAVAH8C0KGqtxZfGwfQkXNML4De0odIROWw4ld2RKQBwG8BfE9VP/WKkS6+CrPsKzGq2qeq+1V1f9JIiSjJisIuImuxGPRfqervspsviEhXVu8CMFGZIRJRObhP42VxDuNzAN5V1R8vKR0DcATAs9nblysywk+PJbfmtbe81py39K815fH8+fPmsd7YPN6yxVYbx2vLpS7BnbLksjd91rtv77xaU4u9bbS9lqQ3rdnbErqIpaRX8lt4EMC3AJwRkcHstqexGPLfiMjjAM4DeLQyQySicnDDrqp/BJD339BXyzscIqoUXi5LFATDThQEw04UBMNOFATDThTEqpni6vWTU3rVgD3V0+uzez18b6lpb5qptWyx18/1lkxO3S7aOt471pvq6fWyrWsAvJ/Znj17zPrVq1fNuje1l1s2E1HFMOxEQTDsREEw7ERBMOxEQTDsREEw7ERBrJo+u8ebO+312a0lk6empsxj29razPr69evNurf9rzVX35vH733f3nLN3nmdn5836xbv+gSvz2716UdHR81je3p6Sv7aQNr3XSl8ZCcKgmEnCoJhJwqCYScKgmEnCoJhJwqCYScKYtX02b35w978Y68fPTk5WfLX9rZk9rYH9uaUW71yb970li1bzPrc3JxZ976+1QtP2c4ZABobG826ta68tZ0z4G/J7P1MvD4857MTUcUw7ERBMOxEQTDsREEw7ERBMOxEQTDsREGsZH/27QB+CaADgALoU9WfisgzAP4RwMXsU59W1VdTBlPJ3qM377q+vt6sW/OTU3uuLS0tZt3bS9zqJ3tz5b3v21vb3fuZWecmtRftrXlv/cy96we8r93U1GTWU36XvWNLvT5hJRfVXAfwfVU9KSKNAE6ISH9W+4mq/ktJ90xEVbWS/dnHAIxl78+KyLsA7qj0wIiovL7Q3+wisgPAVwD8KbvpSRE5LSLPi8iyz0VFpFdEBkRkIGmkRJRkxWEXkQYAvwXwPVWdAfAzADsB7MPiI/+PljtOVftUdb+q7i/DeImoRCsKu4isxWLQf6WqvwMAVb2gqjdU9SaAnwM4ULlhElEqN+yy+NLgcwDeVdUfL7m9a8mnfQPA2fIPj4jKZSWvxh8E8C0AZ0RkMLvtaQCHRWQfFttxwwC+XZERLmG1JLx2hbdkssdqIXmtkKGhIbM+MTFh1hsaGsy6NT3Xa61502+9Zay99pk1/ddrWXr14eFhs24t8e1NS7a2ewb8Za69lmcRVvJq/B8BLJekpJ46EVUXr6AjCoJhJwqCYScKgmEnCoJhJwqCYScKQlKX8/1CdyaSdGdWL93bWnjPnj1m/a677jLrVq+7v78/twb4PV1vKen29naz3tramlvr7Ow0j/Wm11pbVQP+1sTWkszW8twAMDY2Zta95aCnp6dza93d3eaxBw8eNOtej//UqVNmfWRkJLfmTcf2qOqyQeEjO1EQDDtREAw7URAMO1EQDDtREAw7URAMO1EQ1e6zXwRwfslN7QAuVW0AX0ytjq1WxwVwbKUq59juVNVl9+Guatg/d+ciA7W6Nl2tjq1WxwVwbKWq1tj4NJ4oCIadKIiiw95X8P1banVstTougGMrVVXGVujf7ERUPUU/shNRlTDsREEUEnYReVBE/ldEzonIU0WMIY+IDIvIGREZLHp/umwPvQkRObvktlYR6ReR97O39oT06o7tGREZzc7doIg8VNDYtovIH0TkHRF5W0S+m91e6LkzxlWV81b1v9lFpA7AewD+AcAIgDcBHFbVd6o6kBwiMgxgv6oWfgGGiPwdgDkAv1TVL2e3/TOASVV9NvuPskVVf1AjY3sGwFzR23hnuxV1Ld1mHMDDAB5DgefOGNejqMJ5K+KR/QCAc6o6pKrXAPwawKECxlHzVPU1AJ9dzuUQgKPZ+0ex+MtSdTljqwmqOqaqJ7P3ZwHc2ma80HNnjKsqigj7HQD+vOTjEdTWfu8K4PcickJEeosezDI6VPXWek3jADqKHMwy3G28q+kz24zXzLkrZfvzVHyB7vPuU9W/AfB1AN/Jnq7WJF38G6yWeqcr2sa7WpbZZvwvijx3pW5/nqqIsI8C2L7k423ZbTVBVUeztxMAXkLtbUV94dYOutlbe1fIKqqlbbyX22YcNXDuitz+vIiwvwlgt4h8SUTWAfgmgGMFjONzRKQ+e+EEIlIP4Guova2ojwE4kr1/BMDLBY7lU2plG++8bcZR8LkrfPtzVa36PwAPYfEV+f8D8E9FjCFnXN0A3sr+vV302AC8iMWndQtYfG3jcQBtAI4DeB/AfwNoraGx/TuAMwBOYzFYXQWN7T4sPkU/DWAw+/dQ0efOGFdVzhsvlyUKgi/QEQXBsBMFwbATBcGwEwXBsBMFwbATBcGwEwXx/9SAjDKmOKT8AAAAAElFTkSuQmCC\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "RHT5RdhTgpfs",
        "outputId": "e13494a2-5a5c-4ab8-a112-ae69e513bcf2"
      },
      "source": [
        "10./(28.*28.)"
      ],
      "execution_count": 109,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.012755102040816327"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 109
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "eW7CLPvdg0at"
      },
      "source": [
        "# OTRA FORMA DE DEFINIR MODELOS"
      ],
      "execution_count": 115,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "A6YAZx7zhpom"
      },
      "source": [
        "# defino el mismo encoder de una manera más bajo nivel"
      ],
      "execution_count": 116,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "XNW1pm6Chx7u"
      },
      "source": [
        "inp = Input(shape=(28,28))\n",
        "h = Dense(h_dim, activation=\"relu\")(Flatten()(inp))\n",
        "z = Dense(z_dim, activation=\"tanh\")(h)"
      ],
      "execution_count": 125,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "r90iywW4h1xy"
      },
      "source": [
        "encoder2 = Model(inp, z)"
      ],
      "execution_count": 127,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "UK3M1-Igh2J6",
        "outputId": "81076606-4a27-449a-a23a-11b8d78bcb3d"
      },
      "source": [
        "encoder2.summary()"
      ],
      "execution_count": 128,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Model: \"model\"\n",
            "_________________________________________________________________\n",
            "Layer (type)                 Output Shape              Param #   \n",
            "=================================================================\n",
            "input_5 (InputLayer)         [(None, 28, 28)]          0         \n",
            "_________________________________________________________________\n",
            "flatten_8 (Flatten)          (None, 784)               0         \n",
            "_________________________________________________________________\n",
            "dense_20 (Dense)             (None, 100)               78500     \n",
            "_________________________________________________________________\n",
            "dense_21 (Dense)             (None, 10)                1010      \n",
            "=================================================================\n",
            "Total params: 79,510\n",
            "Trainable params: 79,510\n",
            "Non-trainable params: 0\n",
            "_________________________________________________________________\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "03zTpfMOimHN"
      },
      "source": [
        "# CONVOLUCIONAL"
      ],
      "execution_count": 14,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "WOEpTBXii9Ph"
      },
      "source": [
        "from keras.layers import Conv2D, Conv2DTranspose"
      ],
      "execution_count": 15,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "QoYXn1tbjtFM",
        "outputId": "a92af51b-30ca-435c-c6f7-9438e1619421"
      },
      "source": [
        "x_train.shape"
      ],
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(60000, 28, 28)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 16
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "jCoDC2lkjgId"
      },
      "source": [
        "encoder_c = Sequential([\n",
        "                            Reshape((28,28,1), input_shape = (28,28)),\n",
        "                            Conv2D(h_dim/2, 3, strides=2, activation=\"relu\"),\n",
        "                            Conv2D(h_dim, 3, strides=2, activation=\"relu\"),\n",
        "                            Flatten(),\n",
        "                            Dense(z_dim, activation=\"tanh\")\n",
        "])"
      ],
      "execution_count": 17,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "f125Wm6HkDlr",
        "outputId": "3b4092da-8f7c-4e76-d8d5-bd9b78a13826"
      },
      "source": [
        "encoder_c.summary()"
      ],
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Model: \"sequential\"\n",
            "_________________________________________________________________\n",
            "Layer (type)                 Output Shape              Param #   \n",
            "=================================================================\n",
            "reshape (Reshape)            (None, 28, 28, 1)         0         \n",
            "_________________________________________________________________\n",
            "conv2d (Conv2D)              (None, 13, 13, 50)        500       \n",
            "_________________________________________________________________\n",
            "conv2d_1 (Conv2D)            (None, 6, 6, 100)         45100     \n",
            "_________________________________________________________________\n",
            "flatten (Flatten)            (None, 3600)              0         \n",
            "_________________________________________________________________\n",
            "dense (Dense)                (None, 10)                36010     \n",
            "=================================================================\n",
            "Total params: 81,610\n",
            "Trainable params: 81,610\n",
            "Non-trainable params: 0\n",
            "_________________________________________________________________\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ZK3mah9_kFN9"
      },
      "source": [
        "decoder_c = Sequential([\n",
        "                        Dense(3600, activation=\"relu\", input_shape=(z_dim,)),\n",
        "                        Reshape((6,6,100)),\n",
        "                        Conv2DTranspose(h_dim/2, 3, strides=2, padding=\"valid\", activation=\"relu\"),\n",
        "                        Conv2DTranspose(1, 4, strides=2, padding=\"valid\", activation=\"tanh\"),\n",
        "                        Reshape((28,28))\n",
        "])"
      ],
      "execution_count": 19,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "370BbS2ql6Gs",
        "outputId": "7447940a-1622-46c1-96ec-085ca7fdb46b"
      },
      "source": [
        "decoder_c.summary()"
      ],
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Model: \"sequential_1\"\n",
            "_________________________________________________________________\n",
            "Layer (type)                 Output Shape              Param #   \n",
            "=================================================================\n",
            "dense_1 (Dense)              (None, 3600)              39600     \n",
            "_________________________________________________________________\n",
            "reshape_1 (Reshape)          (None, 6, 6, 100)         0         \n",
            "_________________________________________________________________\n",
            "conv2d_transpose (Conv2DTran (None, 13, 13, 50)        45050     \n",
            "_________________________________________________________________\n",
            "conv2d_transpose_1 (Conv2DTr (None, 28, 28, 1)         801       \n",
            "_________________________________________________________________\n",
            "reshape_2 (Reshape)          (None, 28, 28)            0         \n",
            "=================================================================\n",
            "Total params: 85,451\n",
            "Trainable params: 85,451\n",
            "Non-trainable params: 0\n",
            "_________________________________________________________________\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "v3N9k5JcnLRN"
      },
      "source": [
        "autoencoder_c = Sequential([encoder_c, decoder_c])"
      ],
      "execution_count": 21,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "u8fHzSyEo9sR"
      },
      "source": [
        "autoencoder_c.compile(optimizer=\"adam\", loss=\"mse\")"
      ],
      "execution_count": 22,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "L2ngkdNgpBbM",
        "outputId": "fbc70d74-d066-4310-f4f9-89f82985843d"
      },
      "source": [
        "autoencoder_c.fit(x_train, x_train, batch_size=512, epochs=40, validation_data=(x_test, x_test))"
      ],
      "execution_count": 23,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Epoch 1/40\n",
            "118/118 [==============================] - 47s 20ms/step - loss: 0.4389 - val_loss: 0.1357\n",
            "Epoch 2/40\n",
            "118/118 [==============================] - 1s 12ms/step - loss: 0.1171 - val_loss: 0.0918\n",
            "Epoch 3/40\n",
            "118/118 [==============================] - 1s 12ms/step - loss: 0.0876 - val_loss: 0.0800\n",
            "Epoch 4/40\n",
            "118/118 [==============================] - 1s 12ms/step - loss: 0.0776 - val_loss: 0.0742\n",
            "Epoch 5/40\n",
            "118/118 [==============================] - 1s 12ms/step - loss: 0.0727 - val_loss: 0.0704\n",
            "Epoch 6/40\n",
            "118/118 [==============================] - 1s 12ms/step - loss: 0.0689 - val_loss: 0.0668\n",
            "Epoch 7/40\n",
            "118/118 [==============================] - 1s 12ms/step - loss: 0.0657 - val_loss: 0.0642\n",
            "Epoch 8/40\n",
            "118/118 [==============================] - 1s 12ms/step - loss: 0.0633 - val_loss: 0.0621\n",
            "Epoch 9/40\n",
            "118/118 [==============================] - 1s 12ms/step - loss: 0.0614 - val_loss: 0.0607\n",
            "Epoch 10/40\n",
            "118/118 [==============================] - 1s 12ms/step - loss: 0.0598 - val_loss: 0.0595\n",
            "Epoch 11/40\n",
            "118/118 [==============================] - 1s 12ms/step - loss: 0.0586 - val_loss: 0.0583\n",
            "Epoch 12/40\n",
            "118/118 [==============================] - 1s 12ms/step - loss: 0.0575 - val_loss: 0.0574\n",
            "Epoch 13/40\n",
            "118/118 [==============================] - 1s 12ms/step - loss: 0.0565 - val_loss: 0.0565\n",
            "Epoch 14/40\n",
            "118/118 [==============================] - 1s 12ms/step - loss: 0.0553 - val_loss: 0.0559\n",
            "Epoch 15/40\n",
            "118/118 [==============================] - 1s 12ms/step - loss: 0.0549 - val_loss: 0.0555\n",
            "Epoch 16/40\n",
            "118/118 [==============================] - 1s 12ms/step - loss: 0.0544 - val_loss: 0.0546\n",
            "Epoch 17/40\n",
            "118/118 [==============================] - 1s 12ms/step - loss: 0.0536 - val_loss: 0.0542\n",
            "Epoch 18/40\n",
            "118/118 [==============================] - 1s 12ms/step - loss: 0.0531 - val_loss: 0.0542\n",
            "Epoch 19/40\n",
            "118/118 [==============================] - 1s 12ms/step - loss: 0.0528 - val_loss: 0.0535\n",
            "Epoch 20/40\n",
            "118/118 [==============================] - 1s 12ms/step - loss: 0.0523 - val_loss: 0.0530\n",
            "Epoch 21/40\n",
            "118/118 [==============================] - 1s 12ms/step - loss: 0.0519 - val_loss: 0.0527\n",
            "Epoch 22/40\n",
            "118/118 [==============================] - 1s 12ms/step - loss: 0.0515 - val_loss: 0.0528\n",
            "Epoch 23/40\n",
            "118/118 [==============================] - 1s 12ms/step - loss: 0.0511 - val_loss: 0.0520\n",
            "Epoch 24/40\n",
            "118/118 [==============================] - 1s 12ms/step - loss: 0.0508 - val_loss: 0.0516\n",
            "Epoch 25/40\n",
            "118/118 [==============================] - 1s 12ms/step - loss: 0.0504 - val_loss: 0.0516\n",
            "Epoch 26/40\n",
            "118/118 [==============================] - 1s 12ms/step - loss: 0.0503 - val_loss: 0.0512\n",
            "Epoch 27/40\n",
            "118/118 [==============================] - 1s 12ms/step - loss: 0.0498 - val_loss: 0.0509\n",
            "Epoch 28/40\n",
            "118/118 [==============================] - 1s 12ms/step - loss: 0.0498 - val_loss: 0.0507\n",
            "Epoch 29/40\n",
            "118/118 [==============================] - 1s 12ms/step - loss: 0.0499 - val_loss: 0.0506\n",
            "Epoch 30/40\n",
            "118/118 [==============================] - 1s 12ms/step - loss: 0.0490 - val_loss: 0.0505\n",
            "Epoch 31/40\n",
            "118/118 [==============================] - 1s 12ms/step - loss: 0.0490 - val_loss: 0.0504\n",
            "Epoch 32/40\n",
            "118/118 [==============================] - 1s 13ms/step - loss: 0.0487 - val_loss: 0.0499\n",
            "Epoch 33/40\n",
            "118/118 [==============================] - 1s 12ms/step - loss: 0.0483 - val_loss: 0.0500\n",
            "Epoch 34/40\n",
            "118/118 [==============================] - 2s 13ms/step - loss: 0.0487 - val_loss: 0.0498\n",
            "Epoch 35/40\n",
            "118/118 [==============================] - 2s 13ms/step - loss: 0.0484 - val_loss: 0.0495\n",
            "Epoch 36/40\n",
            "118/118 [==============================] - 2s 13ms/step - loss: 0.0481 - val_loss: 0.0496\n",
            "Epoch 37/40\n",
            "118/118 [==============================] - 2s 13ms/step - loss: 0.0477 - val_loss: 0.0496\n",
            "Epoch 38/40\n",
            "118/118 [==============================] - 2s 13ms/step - loss: 0.0477 - val_loss: 0.0492\n",
            "Epoch 39/40\n",
            "118/118 [==============================] - 1s 13ms/step - loss: 0.0477 - val_loss: 0.0491\n",
            "Epoch 40/40\n",
            "118/118 [==============================] - 1s 13ms/step - loss: 0.0475 - val_loss: 0.0491\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<keras.callbacks.History at 0x7f90804b84d0>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 23
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "UvIFPm9vpQks"
      },
      "source": [
        "history_c = _"
      ],
      "execution_count": 24,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "Y1MwkJL1pp5h",
        "outputId": "ba939788-67e5-432c-8c93-6a9a1efb0442"
      },
      "source": [
        "plt.figure(figsize=(20,20))\n",
        "plt.plot(history_c.history['loss'])\n",
        "plt.plot(history_c.history['val_loss'])\n",
        "plt.legend([\"loss\", \"val_loss\"])\n",
        "plt.grid()"
      ],
      "execution_count": 25,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 1440x1440 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 282
        },
        "id": "IP2PVTi-qdQz",
        "outputId": "80e38c70-d16d-4149-e3ff-882bdb613f5c"
      },
      "source": [
        "plt.imshow(x_test[7])"
      ],
      "execution_count": 26,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.image.AxesImage at 0x7f90805d2850>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 26
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 282
        },
        "id": "apoIdGCCq1yL",
        "outputId": "297e24cb-fe80-42df-d5a4-2c5cd655418c"
      },
      "source": [
        "reconstruction = autoencoder_c.predict(x_test[7:8])\n",
        "plt.imshow(reconstruction[0])"
      ],
      "execution_count": 27,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.image.AxesImage at 0x7f9080448cd0>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 27
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "t4Wr-CImq3Bi",
        "outputId": "da2d10cd-af5e-4dff-90ea-c296187d89cb"
      },
      "source": [
        "encoder_c.predict(x_test[7:8])"
      ],
      "execution_count": 28,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[ 0.08664396,  0.10284423, -0.18621704,  0.42135176, -0.36684036,\n",
              "         0.17075568, -0.0205466 ,  0.4461373 , -0.08705711,  0.2980696 ]],\n",
              "      dtype=float32)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 28
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 282
        },
        "id": "o-ycLN-dq9tq",
        "outputId": "f2f87e06-ec72-4a66-d0e2-120b1b590185"
      },
      "source": [
        "plt.imshow((reconstruction[0]-x_test[7]), cmap=\"jet\")"
      ],
      "execution_count": 29,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.image.AxesImage at 0x7f90801ea2d0>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 29
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "--aGtzu5rD2Q"
      },
      "source": [
        ""
      ],
      "execution_count": 29,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "mBwkuxpxrZLX"
      },
      "source": [
        "# visualizar el espacio latente"
      ],
      "execution_count": 30,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "7cebzOYRMQ6x"
      },
      "source": [
        ""
      ],
      "execution_count": 30,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "FuFEq21NMUtj"
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    }
  ]
}